///////////////////////////////////////////////////////////////////////////////////
//
// Обработчики действий бизнес-процесса ПодготовитьСистемкКОбновлениюАИТП
//
//////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - обработчик действия. Запрещает старт регламентных заданий, за исключением необходимых для обновления
//
// Параметры:
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса	 - точка маршрута действия
//  Задача				 - ЗадачаОбъект.ЗадачаАИТП	 -  задача действия
//  ПараметрыВыполнения	 - Соответствие	 - параметры выполнения действия
//
Процедура ЗапретитьСтартФоновыхЗаданийПроцессов(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
	
	// Получаем и сохраняем текущие параметры использования регламентных задаий
	ПараметрыИспользования = ОбновлениеСистемыАИТП.СформироватьПараметрыИспользованияРегламентныхЗаданий();
	ОбновлениеСистемыАИТП.ВставитьПараметрыИспользованияРегламентныхЗаданий(Задача.БизнесПроцесс, ПараметрыИспользования);
	
	// Запрещаем старт новых процессов
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("СтартоватьПроцессыАИТП");
	РегламентноеЗадание.Использование = Ложь;
	РегламентноеЗадание.Записать();
	
	// Запрещаем выполнение задач, ожидающих выполнения
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ВыполнитьОжидающиеВыполненияЗадачиАИТП");
	РегламентноеЗадание.Использование = Ложь;
	РегламентноеЗадание.Записать();

	// Создаем список заданий-исключений
	ЗаданияИсключения = ОбновлениеСистемыАИТП.ПолучитьСписокНеБлокируемыхРегламентныхЗаданий();
	
	// Запрещаем выполнение заданий
	Для каждого МетаданныеРегламентноеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		Если ЗаданияИсключения.Получить(МетаданныеРегламентноеЗадание) = Неопределено
			И МетаданныеРегламентноеЗадание.Предопределенное = Истина Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеРегламентноеЗадание);
			РегламентноеЗадание.Использование = Ложь;
			РегламентноеЗадание.Записать();
		
		КонецЕсли;
		
	КонецЦикла;
			
	// Подключаем обработчик ожидания завершения фоновых заданий
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ОбработчикОжиданияЗавершенияФоновыхЗаданийАИТП");
	РегламентноеЗадание.Использование = Истина;
	РегламентноеЗадание.Записать();
	
	// Устанавливаем результат выполнения
	Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
	Задача.Записать();
	
КонецПроцедуры

// Процедура - обработчик регламентного задания ОбработчикОжиданияЗавершенияФоновыхЗаданийАИТП
//
Процедура ОбработчикОжиданияЗавершенияФоновыхЗаданий() Экспорт
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачаАИТП.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                      |ГДЕ
	                      |	ЗадачаАИТП.ТочкаМаршрута = &ТочкаМаршрута
	                      |	И ЗадачаАИТП.Выполнена = &Выполнена");
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.ПодготовитьСистемуКОбновлениюАИТП.ТочкиМаршрута.ПодождатьЗавершенияФоновыхЗаданий);
	Запрос.УстановитьПараметр("Выполнена", Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Задача.Записать();
		Задача.ВыполнитьЗадачу();
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик действия. Проверяет отсутствие выполнения фоновых заданий в течении 
// заданного интервала
//
// Параметры:
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса	 - точка маршрута действия
//  Задача				 - ЗадачаОбъект.ЗадачаАИТП	 -  задача действия
//  ПараметрыВыполнения	 - Соответствие	 - параметры выполнения действия
//
Процедура ПроверитьЗавершениеФоновыхЗаданий(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
		
	ЗаданияИсключения = ОбновлениеСистемыАИТП.ПолучитьСписокНеБлокируемыхРегламентныхЗаданий();
	
	// Проверяем активные фоновые задаия
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
	ДатаОкончания = ТекущаяДата() - Константы.ИнтервалНеактивностиФоновыхЗаданийАИТП.Получить();	

	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Если Найти(ФоновоеЗадание.Наименование, "Проверить завершение фоновых заданий") = 0
			И Не ФоновоеЗадание.ИмяМетода = "ПодготовитьСистемуКОбновлениюАИТП.ОбработчикОжиданияЗавершенияФоновыхЗаданий" Тогда
			
			Если Не ФоновоеЗадание.РегламентноеЗадание = Неопределено
				И Не ЗаданияИсключения.Получить(ФоновоеЗадание.РегламентноеЗадание.Метаданные) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно
				Или ФоновоеЗадание.Конец > ДатаОкончания Тогда
				
				Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный;
				Задача.Записать();
				Возврат;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем, что задания не выполняются определенное время
	
	Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
	Задача.Записать();
	
КонецПроцедуры

// Процедура - обработчик действия. Отключает обработчик ожидания завершения фоновых заданий. 
//
// Параметры:
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса	 - точка маршрута действия
//  Задача				 - ЗадачаОбъект.ЗадачаАИТП	 -  задача действия
//  ПараметрыВыполнения	 - Соответствие	 - параметры выполнения действия
//
Процедура ОтключитьОбработчикОжиданияЗавершенияФоновыхЗаданий(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ОбработчикОжиданияЗавершенияФоновыхЗаданийАИТП");
	РегламентноеЗадание.Использование = Ложь;
	РегламентноеЗадание.Записать();
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ПометитьНезапущенныеАсинхронныеЗадачиКакЗавершенныеСОшибкойАИТП");
	РегламентноеЗадание.Использование = Ложь;
	РегламентноеЗадание.Записать();

	Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
	Задача.Записать();
	
КонецПроцедуры

// Процедура - обработчик действия. Разрешает выполнение регламентных заданий в системе. 
//
// Параметры:
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса	 - точка маршрута действия
//  Задача				 - ЗадачаОбъект.ЗадачаАИТП	 -  задача действия
//  ПараметрыВыполнения	 - Соответствие	 - параметры выполнения действия
//
Процедура РазрешитьСтартФоновыхЗаданийПроцессов(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
	
	ПараметрыИспользования = ОбновлениеСистемыАИТП.ПолучитьПараметрыИспользованияРегламентныхЗаданий(Задача.БизнесПроцесс);
	// Отключаем обработчик ожидания завершения фоновых заданий
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ОбработчикОжиданияЗавершенияФоновыхЗаданийАИТП");
	РегламентноеЗадание.Использование = Ложь;
	РегламентноеЗадание.Записать();
	
	ОбновлениеСистемыАИТП.РазрешитьСтартФоновыхЗаданийПроцессов(ПараметрыИспользования);	
	// Устанавливаем результат выполнения
	Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
	Задача.Записать();
	
КонецПроцедуры

#КонецОбласти