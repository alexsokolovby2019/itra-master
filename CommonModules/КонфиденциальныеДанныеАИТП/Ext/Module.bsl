
#Область ПрограммныйИнтерфейс

// Процедура - Вставляет конфиденциальные данные в хранилище
//
// Параметры:
//  Владелец			 - ОбъектСсылка - ссылка на объект-владелец данных 
//  Ключ				 - Строка - идентификатор данных 
//  ДвоичныеДанные		 - ДвоичныеДанные - данные в виде объекта типа ДвоичныеДанные 
//  НастройкиШифрования	 - Структура, СправочникСсылка.НастройкиШифрованияАИТП - настройки шифрования данных 
//
Процедура ВставитьКонфиденциальныеДанные(Владелец, Ключ = "Пароль", ДвоичныеДанные) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КонфиденциальныеДанныеАИТП.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Владелец = Владелец;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		ХранимыеДанные = Новый Соответствие;
	Иначе
		ХранимыеДанные = МенеджерЗаписи.Данные.Получить();
	КонецЕсли;
	
	ХранимыеДанные.Вставить(Ключ, ДвоичныеДанные);
	МенеджерЗаписи.Владелец = Владелец;
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ХранимыеДанные);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Процедура - Удаляет конфиденциальные данные из хранилища
//
// Параметры:
//  Владелец - ОбъектСсылка - ссылка на объект-владелец данных 
//  Ключ	 - Строка - идентификатор данных 
//
Процедура УдалитьКонфиденциальныеДанные(Владелец, Ключ = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КонфиденциальныеДанныеАИТП.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Владелец = Владелец;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	Если Ключ = Неопределено Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	ХранимыеДанные = МенеджерЗаписи.Данные.Получить();
	
	Если Не ХранимыеДанные.Получить(Ключ) = Неопределено Тогда
		ХранимыеДанные.Удалить(Ключ);
	КонецЕсли;
	
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ХранимыеДанные);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Функция - Получить конфиденциальные данные
//
// Параметры:
//  Владелец - ОбъектСсылка - ссылка на объект-владелец данных
//  Ключ	 - Строка - идентификатор данных 
// 
// Возвращаемое значение:
//   - Произвольный - конфиденциальные данные как объект типа ДвоичныеДанные
//
Функция ПолучитьКонфиденциальныеДанные(Владелец, Ключ = "Пароль") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КонфиденциальныеДанныеАИТП.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Владелец = Владелец;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранимыеДанные = МенеджерЗаписи.Данные.Получить();
	Данные = ХранимыеДанные.Получить(Ключ);
	
	Возврат Данные;
	
КонецФункции

// Функция - Получает конфиденциальные данные в виде строки
//
// Параметры:
//  Владелец - ОбъектСсылка - ссылка на объект-владелец данных 
//  Ключ	 - строка - идентификатор данных 
// 
// Возвращаемое значение:
//   - Строка - конфиденциальные данные в виде строки
//
Функция ПолучитьКонфиденциальныеДанныеКакСтроку(Владелец, Ключ = "Пароль") Экспорт
	
	Данные = ПолучитьКонфиденциальныеДанные(Владелец, Ключ);
	
	Если Не Данные = Неопределено Тогда
		Возврат ПолучитьСтрокуИзДвоичныхДанных(Данные);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура - Вставляет в хранилище конфиденциальные данные в виде строки
//
// Параметры:
//  Владелец			 - ОбъектСсылка - ссылка на объект-владелец данных 
//  Ключ				 - строка - идентификатор данных 
//  Данные				 - 	Произвольный - конфиденциальные данные в виде строки 
//  НастройкиШифрования	 - Справочник.НастройкиШифрованияАИТП - настройки шифрования конфиденциальных данных 
//
Процедура ВставитьСтрокуКонфиденциальныхДанных(Владелец, Ключ = "Пароль", Данные) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Данные);
	ВставитьКонфиденциальныеДанные(Владелец, Ключ, ДвоичныеДанные);
	
КонецПроцедуры

#КонецОбласти 
