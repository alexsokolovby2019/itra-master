//////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Реализует функционал напоминаний пользователя
// На основе БСП
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Получает интервал напоминаний 
//
Функция ПолучитьИнтервалПроверкиНапоминаний() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИнтервалПроверкиНапоминанийАИТП.Получить();
	
КонецФункции

// Возвращает признак возможности использования напоминаний
//
Функция РазрешеноИспользованиеНапоминаний() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьАвтоматическиеНапоминанияПользователяАИТП.Получить();	
	
КонецФункции

// Выполняет запрос по напоминаниям для текущего пользователя на момент времени ТекущаяДатаСеанса() + 30минут.
// Момент времени смещен от текущего для использования функции из модуля с повторным использованием
// возвращаемых значений.
// При обработке результата выполнения функции необходимо учитывать эту особенность.
//
// Параметры
//	Нет
//
// Возвращаемое значение
//  Массив - таблица значений, сконвертированная в массив из структур, содержащих данные строк таблицы.
Функция ПолучитьНапоминанияТекущегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Напоминания.Пользователь КАК Пользователь,
	|	Напоминания.ВремяСобытия КАК ВремяСобытия,
	|	Напоминания.Источник КАК Источник,
	|	Напоминания.СрокНапоминания КАК СрокНапоминания,
	|	Напоминания.Описание КАК Описание,
	|	2 КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.НапоминанияПользователяАИТП КАК Напоминания
	|ГДЕ
	|	Напоминания.СрокНапоминания <= &ТекущаяДата
	|	И Напоминания.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяСобытия";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса() + 30*60);// +30 минут для кэша
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользовательАИТП);
	
	Результат = НапоминанияПользователяСлужебныйАИТП.ПолучитьМассивСтруктурИзТаблицы(Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры
//  СсылкаНаПредмет  - ЛюбаяСсылка - объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка.
// 
Функция ПредметСтрокой(СсылкаНаПредмет) Экспорт
	
	Результат = "";
	
	//ОбщегоНазначенияПереопределяемый.УстановитьПредставлениеПредмета(СсылкаНаПредмет, Результат);
	
	Если ПустаяСтрока(Результат) Тогда
		
		Если СсылкаНаПредмет = Неопределено или СсылкаНаПредмет.Пустая() Тогда
			
			Результат = НСтр("ru = 'не задан'");
			
		ИначеЕсли Метаданные.Документы.Содержит(СсылкаНаПредмет.Метаданные()) Тогда
			
			Результат = Строка(СсылкаНаПредмет);
			
		Иначе
			
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
			
			Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
				ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
			КонецЕсли;
			
			Результат = Строка(СсылкаНаПредмет) + " " + ПредставлениеОбъекта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет, доступность пользователю заметок и напоминаний
//
Функция РазрешеныНапоминания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Новый УникальныйИдентификатор(ПользователиАИТП.ТекущийПользователь().Код)
		);
		
	Возврат (Не ПользовательИБ = Неопределено) И РольДоступна("ИспользованиеНапоминанийАИТП");
	
КонецФункции

#КонецОбласти