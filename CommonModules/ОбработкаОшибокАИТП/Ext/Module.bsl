///////////////////////////////////////////////////////////////////////////////////
//
// Функции обработки ошибок выполнения действий по задачам
//
//////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при возникновении исключения в процедуре ПередВыполнениемДействи(й)я
// в процедурах:
// БизнесПроцессыАИТП.ВыполнитьДействиеПоЗадаче
// БизнесПроцессыАИТП.ВыполнитьДействияПоТочкеМаршрута
// если соответствующий обработчик не переопределен
//
Процедура ОбработатьОшибкуПередВыполнениемДействий(ТочкаМаршрута, Ошибка) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбработкаОшибокПереопределяемыйАИТП.ОбработатьОшибкуПередВыполнениемДействий(ТочкаМаршрута, Ошибка, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработкаОшибкиПередВыполнениемДействий(ТочкаМаршрута, Ошибка);
	
КонецПроцедуры

// Вызывается при возникновении исключения в процедуре ПриВыполненииДействия
// в процедурах:
// БизнесПроцессыАИТП.ВыполнитьДействиеПоЗадаче
// БизнесПроцессыАИТП.ВыполнитьДействияПоТочкеМаршрута
// если соответствующий обработчик не переопределен
//
Процедура ОбработатьОшибкуПриВыполненииДействия(ТочкаМаршрута, Задача, Ошибка) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбработкаОшибокПереопределяемыйАИТП.ОбработатьОшибкуПриВыполненииДействия(ТочкаМаршрута, Задача, Ошибка, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработкаОшибкиПриВыполненииДействия(ТочкаМаршрута, Задача, Ошибка);
	
КонецПроцедуры

// Вызывается при возникновении исключения в процедуре ПослеВыполненияДействи(й)я
// в процедурах:
// БизнесПроцессыАИТП.ВыполнитьДействиеПоЗадаче
// БизнесПроцессыАИТП.ВыполнитьДействияПоТочкеМаршрута
// если соответствующий обработчик не переопределен
//
Процедура ОбработатьОшибкуПослеВыполненияДействий(ТочкаМаршрута, Ошибка) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбработкаОшибокПереопределяемыйАИТП.ОбработатьОшибкуПослеВыполненияДействий(ТочкаМаршрута, Ошибка, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработкаОшибкиПослеВыполненияДействий(ТочкаМаршрута, Ошибка);
	
КонецПроцедуры

// Создает экземпляр структуры, содержащий информацию об ошибке
//
Функция НовыйОшибкаВыполнения(Ошибка) Экспорт
	
	ДокументОшибка = Документы.ОшибкиВыполненияАИТП.СоздатьДокумент();
	ДокументОшибка.Описание = ПодробноеПредставлениеОшибки(Ошибка);
	ДокументОшибка.Дата = ТекущаяДата();
	ДокументОшибка.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокументОшибка;
	
КонецФункции

// Стандартный обработчик ошибки ПередВыполнениемДействий(я)
//
Процедура СтандартнаяОбработкаОшибкиПередВыполнениемДействий(ТочкаМаршрута, Ошибка) Экспорт
	
	
КонецПроцедуры

// Стандартный обработчик ошибки ПриВыполненииДействия
//
Процедура СтандартнаяОбработкаОшибкиПриВыполненииДействия(ТочкаМаршрута, Задача, Ошибка) Экспорт
	
КонецПроцедуры

// Стандартный обработчик ошибки ПослеВыполненияДействий(я)
//
Процедура СтандартнаяОбработкаОшибкиПослеВыполненияДействий(ТочкаМаршрута, Ошибка) Экспорт
	
КонецПроцедуры

#КонецОбласти
