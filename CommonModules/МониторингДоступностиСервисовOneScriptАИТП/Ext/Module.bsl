///////////////////////////////////////////////////////////////////////////////////
//
// Служебные функции мониторинга доступности сервисов OneScript
//
//////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - обработчик регламентного задания ПроверитьДоступностьСервисовOneScriptАИТП
//
Процедура ПроверитьДоступностьСервисовOneScriptАИТП() Экспорт

	Если Не Константы.РазрешитьПроверкуДоступностиСервисовOneScriptАИТП.Получить() = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиМониторингаДоступностиСервисовOneScriptАИТП.Сервис КАК Ссылка
	                      |ИЗ
	                      |	РегистрСведений.НастройкиМониторингаДоступностиСервисовOneScriptАИТП КАК НастройкиМониторингаДоступностиСервисовOneScriptАИТП
	                      |ГДЕ
	                      |	НастройкиМониторингаДоступностиСервисовOneScriptАИТП.Сервис.ПометкаУдаления = &ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Параметры = Новый Массив;
		Параметры.Добавить(Выборка.Ссылка);
		
		ФоновыеЗадания.Выполнить("МониторингДоступностиСервисовOneScriptАИТП.ПроверитьДоступностьСервиса", Параметры);
	
	КонецЦикла;
	
КонецПроцедуры

// Проверяет доступность указанного сервиса OneScript
//
// Параметры:
//  Сервис	 - СправочникСсылка.СервисыOneScriptАИТП	 - 
//
Процедура ПроверитьДоступностьСервиса(Сервис) Экспорт

	Результат = ВыполнитьТесты(Сервис);
	
	Если Результат.БылиОшибки = Истина Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	МонторингНедоступногоСервисаOneScriptАИТП.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	БизнесПроцесс.МонторингНедоступногоСервисаOneScriptАИТП КАК МонторингНедоступногоСервисаOneScriptАИТП
		                      |ГДЕ
		                      |	МонторингНедоступногоСервисаOneScriptАИТП.ПометкаУдаления = &ПометкаУдаления
		                      |	И МонторингНедоступногоСервисаOneScriptАИТП.Завершен = &Завершен
		                      |	И МонторингНедоступногоСервисаOneScriptАИТП.Сервис = &Сервис");
		
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		Запрос.УстановитьПараметр("Завершен", Ложь);
		Запрос.УстановитьПараметр("Сервис", Сервис);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			БП = БизнесПроцессы.МонторингНедоступногоСервисаOneScriptАИТП.СоздатьБизнесПроцесс();
			БП.Дата = ТекущаяДата();
			БП.Сервис = Сервис;
			БП.ОтчетОНедоступности = СформироватьОтчетПоРезультатамТестов(Результат);
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
			БП.Записать();
			БП.Старт();
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет тесты для сервиса и для дочерних сервисов
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScript - ссылка на тестируемый сервис
//
// Возвращаемое значение:
//   Структура   - данные результатов тестов
//
Функция ВыполнитьТесты(Сервис) Экспорт

	Результат = ВыполнитьТестыДляСервиса(Сервис);
	
	Если Результат.БылиОшибки = Истина Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СервисыOneScriptАИТП.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.СервисыOneScriptАИТП КАК СервисыOneScriptАИТП
		                      |ГДЕ
		                      |	СервисыOneScriptАИТП.ПометкаУдаления = &ПометкаУдаления
		                      |	И СервисыOneScriptАИТП.Родитель = &Родитель");
		
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		Запрос.УстановитьПараметр("Родитель", Сервис);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.ДочерниеСервисы.Добавить(ВыполнитьТестыДляСервиса(Выборка.Ссылка));
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 
// Выполняет тесты для выбранного сервиса
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScript - ссылка на проверяемый сервис
//
// Возвращаемое значение:
//   Структура   - содержит результаты теста сервиса
//
Функция ВыполнитьТестыДляСервиса(Сервис) Экспорт

	Результат = НовыйРезультатТеста(Сервис);
	
	МенеджерЗаписи = РегистрыСведений.НастройкиМониторингаДоступностиСервисовOneScriptАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = Сервис;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Результат.РезультатВыполнитьСкрипт = "Не проверялся";
		Результат.РезультатВыполнитьМетод = "Не проверялся";
		Возврат Результат;
	КонецЕсли;
	
	Если МенеджерЗаписи.МетодПроверкиВыполнитьСкрипт = Истина Тогда
		Попытка
			ВыполнитьТестовыйСкрипт(Сервис);
		Исключение
			Ошибка = ОписаниеОшибки();
			Результат.БылиОшибки = Истина;
			Результат.РезультатВыполнитьСкрипт = Ошибка;
		КонецПопытки;
	Иначе
		Результат.РезультатВыполнитьСкрипт = "Не проверялся";
	КонецЕсли;
	
	Если МенеджерЗаписи.МетодПроверкиВыполнитьМетод = Истина Тогда
		Попытка
			ВыполнитьТестовыйМетод(Сервис);
		Исключение
			Ошибка = ОписаниеОшибки();
			Результат.БылиОшибки = Истина;
			Результат.РезультатВыполнитьМетод = Ошибка;
		КонецПопытки;
	Иначе
		Результат.РезультатВыполнитьМетод = "Не проверялся";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует отчет  в текстовом виде по результатам теста сервиса
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScriptАИТП - ссылка на тестированный сервис
//  Результат  - Структура - результаты тестов
//
// Возвращаемое значение:
//   Строка   - текст отчета
//
Функция СформироватьОтчетПоРезультатамТестаСервиса(Результат) Экспорт

		Макет = ПолучитьОбщийМакет("ШаблонОтчетаТестДоступностиСервисаOneScriptАИТП").ПолучитьТекст();
		ОбластьШапка = ТекстовыеШаблоныВызовСервераАИТП.ПолучитьОбласть(Макет, "#Шапка", "#КонецШапка").Текст;
		Отчет = СтрЗаменить(ОбластьШапка, "{{Код}}", Результат.Сервис.Код);
		Отчет = СтрЗаменить(Отчет, "{{Наименование}}", Результат.Сервис.Наименование);
		
		ОбластьТест = ТекстовыеШаблоныВызовСервераАИТП.ПолучитьОбласть(Макет, "#РезультатТеста", "#КонецРезультатТеста").Текст;
		Текст = СтрЗаменить(ОбластьТест, "{{ВидТеста}}", "Выполнить скрипт");
		Текст = СтрЗаменить(Текст, "{{URL}}", Результат.Сервис.СервисВыполненияСкриптов.URLСервиса);
		Текст = СтрЗаменить(Текст, "{{Результат}}", Результат.РезультатВыполнитьСкрипт);
		Отчет = Отчет + Текст;
		
		Текст = СтрЗаменить(ОбластьТест, "{{ВидТеста}}", "Выполнить метод");
		Текст = СтрЗаменить(Текст, "{{URL}}", Результат.Сервис.СервисВыполненияМетодов.URLСервиса);
		Текст = СтрЗаменить(Текст, "{{Результат}}", Результат.РезультатВыполнитьМетод);
		Отчет = Отчет + Текст;
		
		Возврат Отчет;

КонецФункции

// Формирует отчет по результатам тестов сервиса с учетом подчиненных
//
// Параметры:
//  Результат  - Структура - результаты теста
//
// Возвращаемое значение:
//   Строка   - текстовый отчет о результатах
//
Функция СформироватьОтчетПоРезультатамТестов(Результат) Экспорт

	Отчет = СформироватьОтчетПоРезультатамТестаСервиса(Результат);
	Отчет = Отчет + Символы.ВК + Символы.ПС + "Дочерние сервисы:";
	
	Для каждого ДочернийСервис Из Результат.ДочерниеСервисы Цикл
	
		Отчет = Отчет + Символы.ВК + Символы.ПС + СформироватьОтчетПоРезультатамТестаСервиса(ДочернийСервис);
	
	КонецЦикла;
	
	Возврат Отчет;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает структуру результата теста
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScript - ссылка на тестируемый сервис
//
// Возвращаемое значение:
//   Структура   - данные результатов теста
//
Функция НовыйРезультатТеста(Сервис)

	Результат = Новый Структура;
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("РезультатВыполнитьСкрипт", "Ok");
	Результат.Вставить("РезультатВыполнитьМетод", "Ok");
	Результат.Вставить("Сервис", Сервис); 
	
	ДочерниеСервисы = Новый Массив;
	Результат.Вставить("ДочерниеСервисы", ДочерниеСервисы);
	
	Возврат Результат;

КонецФункции
 
// Выполняет тестовый скрипт
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScriptАИТП - ссылка на проверяемый сервис
//
Процедура ВыполнитьТестовыйСкрипт(Сервис)

	Данные = OneScriptАИТП.ВыполнитьСкрипт("Результат = ITPA.ТестСоединения();",,,,Сервис);
	
	Если Данные["БылиОшибки"] = Истина Тогда
		ВызватьИсключение Данные["ОписаниеОшибки"];
	КонецЕсли;

КонецПроцедуры
 
// Выполняет тестовый метод
//
// Параметры:
//  Сервис  - СправочникСсылка.СервисыOneScriptАИТП - ссылка на проверяемый сервис
//
Процедура ВыполнитьТестовыйМетод(Сервис)

	Данные = OneScriptАИТП.ВыполнитьМетод("ITPA.ТестСоединения",,Истина,, Сервис);
	
	Если Данные["БылиОшибки"] = Истина Тогда
		ВызватьИсключение Данные["ОписаниеОшибки"];
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
