//////////////////////////////////////////////////////////////////////////////////////////////////
//
// Функции обмена данными 
//
//////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Отправляет сообщение обмена
//
// Параметры:
//  Получатель	 - СправочникСсылка.ПолучателиСообщенийОбменаАИТП, СправочникСсылка.ГруппыПолучателейСообщенийОбменаАИТП	 - ссылка на получателя сообщения
//  Данные			 - Структура, Соответствие	 - передаваемые данные
//  ТекущиеОперации	 - Массив	 - текущие операции над объектом
//  ВлияетНаОперации - Массив	 - операции на которые влияет процесс
//  Объект			 - ОбъектСсылка	 - ссылка на объект-владелец данных
//
Процедура ОтправитьСообщение(Получатель, Данные, ТекущиеОперации, ВлияетНаОперации, Объект = Неопределено, ИмяРеквизита = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ПолучателиСообщенийОбменаАИТП") Тогда
		// Один получатель
		ОтправитьСообщениеПолучателю(Получатель, Данные, ТекущиеОперации, ВлияетНаОперации, Объект);
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ГруппыПолучателейСообщенийОбменаАИТП") Тогда
		// Группа получателей
		ОтправитьСообщениеГруппеПолучателей(Получатель, Данные, ТекущиеОперации, ВлияетНаОперации, Объект);
		
	Иначе
		// Какая-то коллекция
		ОтправитьСообщениеПолучателям(Получатель, Данные, ТекущиеОперации, ВлияетНаОперации, Объект, ИмяРеквизита);
		
	КонецЕсли;
		
КонецПроцедуры

// Преобразует данные к формату, совместимому с JSON
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо преобразовать к формату, совместимому с JSON 
// 
// Возвращаемое значение:
//   - Произвольный - значение, преобразованное к типу, совместимому с JSON
//
Функция ФорматJSON(Значение) Экспорт
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		СтрокаДата = Формат(Значение, "ДФ=""ггггММддЧЧммсс""");
		
		Если СтрокаДата = "" Тогда
			Возврат "000101010000";
		Иначе
			Возврат СтрокаДата;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗначения = Тип("ДвоичныеДанные") Тогда
		Возврат Base64Строка(Значение);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Возврат Значение;
	Иначе
		
		МетаданныеТип = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если МетаданныеТип = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Найти(МетаданныеТип.ПолноеИмя(), "Перечисление") = 1 Тогда
			Возврат Строка(Значение);
		Иначе
			Возврат Строка(Значение.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Обновляет хеш-сумму в регистре сведений
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - ссылка на объект-владелец данных
//  Данные	 - Структура	 -  данные, хеш-сумму которых необходимо обновить
//  Ключ	 - Строка	 - уточняет вид данных, связанных с объектом
// 
// Возвращаемое значение:
// Булево  - Истина, если хеш-суммы различны, Ложь - если одинаковы
//
Функция ОбновитьХешСумму(Объект, Данные, Ключ = "") Экспорт
	
	ХешСумма = РассчитатьХешСумму(Данные);
	
	МенеджерЗаписи = РегистрыСведений.ХешСуммыДанныхОбменаАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Ключ = Ключ;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() И ХешСумма = МенеджерЗаписи.ХешСумма Тогда
			Возврат Ложь;
	Иначе
		
		МенеджерЗаписи.Объект = Объект;
		МенеджерЗаписи.Ключ = Ключ;
		МенеджерЗаписи.ХешСумма = ХешСумма;
		МенеджерЗаписи.Записать(Истина);
		
		Возврат Истина;
		
	КонецЕсли;
			
КонецФункции

// Рассчитывает хеши MD5 & SHA256 и возвращает строку их комбинации
//
// Параметры:
//  Данные	 - Структура	 - данные, для которых необходимо рассчитать хеши
// 
// Возвращаемое значение:
// Строка  - комбинация строковых представлений хешей MD5 и SHA256
//
Функция РассчитатьХешСумму(Данные) Экспорт
	
	ХешированиеДанныхMD = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанныхSHA256 = Новый ХешированиеДанных(ХешФункция.SHA256);
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ЗначениеВСтрокуВнутр(Данные));
	ХешированиеДанныхMD.Добавить(ДвоичныеДанные);
	ХешированиеДанныхSHA256.Добавить(ДвоичныеДанные);
	
	Возврат Base64Строка(ХешированиеДанныхMD.ХешСумма) + Base64Строка(ХешированиеДанныхSHA256.ХешСумма);
	
КонецФункции

// Возвращает хеш-сумму по указанному объекту
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - ссылка на объект-владелец данных
//  Ключ	 - Строка	 - уточняет вид данных, связанных с объектом
// 
// Возвращаемое значение:
// Строка  - строковое представление комбинации хешей MD5 и SHA256
//
Функция ПолучитьХешСумму(Объект, Ключ = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ХешСуммыДанныхОбменаАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Ключ = Ключ;
	МенеджерЗаписи.Прочитать();
	Возврат МенеджерЗаписи.ХешСумма;
	
КонецФункции

// Помещает хеш-сумму в регистр сведений
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - ссылка на объект-владелец данных
//  ХешСумма - Строка	 - строковое представление хешей MD5 и SHA256
//  Ключ	 - Строка	 - уточняет вид данных, связанных с объектом
//
Процедура ПоместитьХешСумму(Объект, ХешСумма, Ключ = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ХешСуммыДанныхОбменаАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Ключ = Ключ;
	МенеджерЗаписи.ХешСумма = ХешСумма;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет запись с хеш-суммой из регистра сведений
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - ссылка на объект-владелец данных
//  Ключ	 - Строка	 - уточняет вид данных, связанных с объектом
//
Процедура УдалитьХешСумму(Объект, Ключ) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ХешСуммыДанныхОбменаАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Ключ = Ключ;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все хеш-суммы, связанные с объектом
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - владелец хеш-сумм
//
Процедура УдалитьХешСуммыОбъекта(Объект) Экспорт
	
	НаборЗаписей = РегистрыСведений.ХешСуммыДанныхОбменаАИТП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.УстановитьЗначение(Объект);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет зависимости предыдущей версии объекта
//
// Параметры:
//  ТекущиеОперации	 - Массив	 - Массив зависимостей текущих операций
//  ВлияетНаОперации - Массив	 - Массив зависимостей на которые влияют текущие операции
//  Объект			 - ЛюбаяСсылка	 - Ссылка на объект-владелец
//
Процедура ДобавитьЗависимостиПредыдущейВерсии(ТекущиеОперации, ВлияетНаОперации, Объект) Экспорт
	
	Если ТекущиеОперации = Неопределено Тогда
		ТекущиеОперации = Новый Массив;
	КонецЕсли;
	
	Если ВлияетНаОперации = Неопределено Тогда
		ВлияетНаОперации = Новый Массив;
	КонецЕсли;
	
	ЗависимостиПредыдущейВерсии = ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(Объект, "Зависимости");
	
	Зависимости = Новый Структура;
	Зависимости.Вставить("ТекущиеОперации", ТекущиеОперации);
	Зависимости.Вставить("ВлияетНаОперации", ВлияетНаОперации);
	ДополнительныеДанныеАИТП.ВставитьДополнительныеДанные(Объект, "Зависимости", Зависимости);
		
	Если Не ЗависимостиПредыдущейВерсии = Неопределено Тогда		
		
		Для каждого Зависимость Из ЗависимостиПредыдущейВерсии.ТекущиеОперации Цикл
			
			//Если Не МассивСодержитЗависимость(ТекущиеОперации, Зависимость) Тогда
			//	ТекущиеОперации.Добавить(Зависимость);
			//КонецЕсли;
			ТекущиеОперации.Добавить(Зависимость);
			
		КонецЦикла;
		
		Для каждого Зависимость Из ЗависимостиПредыдущейВерсии.ВлияетНаОперации Цикл
			
			//Если Не МассивСодержитЗависимость(ВлияетНаОперации, Зависимость) Тогда
			//	ВлияетНаОперации.Добавить(Зависимость);
			//КонецЕсли;
			ВлияетНаОперации.Добавить(Зависимость);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Проверяет, содержит ли массив зависимость
//
// Параметры:
//  МассивЗависимостей	 - Массив	 - массив зависимостей, в котором производится поиск
//  Зависимость			 - Структура	 - зависимость, наличие которой проверяется
// 
// Возвращаемое значение:
// Булево  - Истина, если зависимость есть в массиве, иначе - Ложь
//
Функция МассивСодержитЗависимость(МассивЗависимостей, Зависимость)
	
	Для каждого ТекущаяЗависимость Из МассивЗависимостей Цикл
		
		Если ТекущаяЗависимость.Имя = Зависимость.Имя И ТекущаяЗависимость.Значение = Зависимость.Значение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура стандартной обработки входящего сообщения
//
// Параметры:
//  Отправитель				 - СправочникСсылка.УзлыОбменаАИТП	 - идентификатор отправителя
//  ИдентификаторСообщения	 - Строка	 - уникальный идентификатор сообщения
//  Данные					 - Строка, Соответствие, Неопределено	 - данные сообщения.
//  СтандартнаяОбработка	 - Булево	 - Флаг вызова стандартной обработки сообщения
//
Процедура ОбработатьВходящееСообщение(Отправитель, ИдентификаторСообщения, Данные, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик РЗ ОтправитьСообщенияОбменаАИТП. Отправляет сообщения обмена
//
Процедура ОтправитьСообщенияОбмена() Экспорт
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ВыполнитьДействияПоТочкеМаршрута(
		БизнесПроцессы.ОтправитьСообщениеОбменаАИТП.ТочкиМаршрута.ОтправитьСообщениеОбменаДанными
		, "ОбменДаннымиАИТП.ОбработчикОтправитьСообщениеОбмена"
		, // Обработчик перед выполнением действий
		, // Обработчик после выполнения действий
		, // Обработчик ошибки при выполнении действия
		, // Обработчик ошибки перед выполнением действий
		, // Обработчик ошибки после выполнения действий
		, // Обработчик оповещения при выполнении действия
		, // Обработчик оповещения перед выполнением действий
		, // Обработчик оповещения после выполнения действий
	);

КонецПроцедуры

// Обработчик действия отправки сообщения обмена
//
// Параметры:
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса	 - текущая точка маршрута
//  Задача				 - ЗадачаОбъект.ЗадачаАИТП	 - задача действия отправки
//  ПараметрыВыполнения	 - Соответствие	 - пааметры выполнения действия
//
Процедура ОбработчикОтправитьСообщениеОбмена(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
	// Вставить содержимое обработчика.
	БизнесПроцесс = Задача.БизнесПроцесс.ПолучитьОбъект();
	Получатель = Задача.БизнесПроцесс.Получатель;
	
	Если ТипЗнч(Получатель.НастройкиТранспорта) = Тип("СправочникСсылка.НастройкиHTTPСервисовАИТП") Тогда
		
		ОтправитьСообщениеОбменаHTTPСервис(БизнесПроцесс, Задача, ПараметрыВыполнения);	
		
	ИначеЕсли ТипЗнч(Получатель.НастройкиТранспорта) = Тип("СправочникСсылка.НастройкиWebСервисовАИТП") Тогда
		
		ОтправитьСообщениеОбменаWebСервис(БизнесПроцесс, Задача, ПараметрыВыполнения);
		
	Иначе
		
		ВызватьИсключение "Неизвестный тип транспорта";
		
	КонецЕсли;
	
	Задача.Записать();
	Задача.ВыполнитьЗадачу();
	
КонецПроцедуры

// Создает и выполняет http-запрос для отправки сообщения
//
// Параметры:
//  БизнесПроцесс		 - БизнесПроцессОбъект - бизнес-процесс отправки сообщения
//  Задача				 - Задачи.ЗадачаАИТП - затача отправки
//  ПараметрыВыполнения	 - Соответствие - параметры выполнения действия
//
Процедура ОтправитьСообщениеОбменаHTTPСервис(БизнесПроцесс, Задача, ПараметрыВыполнения)
	
	НастройкиHTTPСервиса = БизнесПроцесс.Получатель.НастройкиТранспорта;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Ответ = ФункцииHttpАИТП.ОтправитьЗапрос(
				"POST"
				, НастройкиHTTPСервиса.URLСервиса
				, НастройкиHTTPСервиса.НастройкиHTTPСоединения
				, БизнесПроцесс.ТелоСообщения
				, Заголовки
			);
			
	ФункцииHttpАИТП.ПроверитьКодСостояния(Ответ, 200, "В процессе выполнения запроса возникли ошибки:");
	БизнесПроцесс.ТелоОтвета = Ответ.ТелоОтвета;
	БизнесПроцесс.Записать();
	
КонецПроцедуры

// Подключается к web-сервису и отправляет сообщение
//
// Параметры:
//  БизнесПроцесс		 - 	БизнесПроцессОбъект - бизнес-процесс отправки сообщения
//  Задача				 - 	Задачи.ЗадачаАИТП - затача отправки
//  ПараметрыВыполнения	 - 	Соответствие - параметры выполнения действия
//
Процедура ОтправитьСообщениеОбменаWebСервис(БизнесПроцесс, Задача, ПараметрыВыполнения)
	
	НастройкиWebСервиса = БизнесПроцесс.Получатель.НастройкиТранспорта;
	ИдентификаторСообщения = ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(БизнесПроцесс.Ссылка, "ИдентификаторСообщения");
	КодУзлаОтправителя = Константы.ТекущийУзелОбменаАИТП.Получить().Код;
	
	WsПрокси = WebСервисыПовтИспАИТП.ПолучитьWsПрокси(НастройкиWebСервиса);
	БизнесПроцесс.ТелоОтвета = WsПрокси.SendMessage(КодУзлаОтправителя, БизнесПроцесс.ТелоСообщения, ИдентификаторСообщения);
	
КонецПроцедуры

// Отправляет сообщение группе получателей
//
// Параметры:
//  ГруппаПолучателей - СправочникСсылка.ГруппыПолучателейСообщенийОбменаАИТП - группа получателей 
//  Данные			 - Структура, Соответствие - данные, которые необходимо передать 
//  ТекущиеОперации	 - Массив - зависимости, от которых зависит очередь выполнения бизнес-процесса 
//  ВлияетНаОперации - Массив - зависимости на которые влияет выполнение бизнес-процесса 
//  Объект			 - ОбъектСсылка - ссылка на объект-владелец данных 
//
Процедура ОтправитьСообщениеГруппеПолучателей(ГруппаПолучателей, Данные, ТекущиеОперации, ВлияетНаОперации, Объект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЧленствоВГруппахПолучателейСообщенийОбменаАИТП.Получатель КАК Получатель
	                      |ИЗ
	                      |	РегистрСведений.ЧленствоВГруппахПолучателейСообщенийОбменаАИТП КАК ЧленствоВГруппахПолучателейСообщенийОбменаАИТП
	                      |ГДЕ
	                      |	ЧленствоВГруппахПолучателейСообщенийОбменаАИТП.Получатель.Отключено = ЛОЖЬ
	                      |	И ЧленствоВГруппахПолучателейСообщенийОбменаАИТП.Получатель.ПометкаУдаления = ЛОЖЬ
	                      |	И ЧленствоВГруппахПолучателейСообщенийОбменаАИТП.ГруппаПолучателей = &ГруппаПолучателей");
	
	Запрос.УстановитьПараметр("ГруппаПолучателей", ГруппаПолучателей);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПолучатели = Результат.Выбрать();
	
	ОтправитьСообщениеПолучателям(ВыборкаПолучатели, Данные, ТекущиеОперации, ВлияетНаОперации, Объект, "Получатель");	
		
КонецПроцедуры

// Отправляет сообщение одному получателю
//
// Параметры:
//  Получатель		 - СправочникСсылка.ПолучателиСообщенийОбменаАИТП	 - получатель сообщения
//  Данные			 - Структура, Соответствие	 - данные для отправки
//  ТекущиеОперации	 - Массив	 - список зависимостей текущей операции
//  ВлияетНаОперации - Массив	 - список зависимостей на которые влияет текущая операция
//  Объект			 - ЛюбаяСсылка	 - владелец данных
//
Процедура ОтправитьСообщениеПолучателю(Получатель, Данные, ТекущиеОперации, ВлияетНаОперации, Объект)
	
	Если Получатель.ПометкаУдаления = Истина Или Получатель.Отключено = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТелоСообщения = СформироватьТелоСообщения(Получатель, Данные);
	
	Если Не Объект = Неопределено Тогда
		ДобавитьЗависимостиПредыдущейВерсии(ТекущиеОперации, ВлияетНаОперации, Объект);	
	КонецЕсли;
	
	БП = БизнесПроцессы.ОтправитьСообщениеОбменаАИТП.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	БП.ТелоСообщения = ТелоСообщения;
	БП.Получатель = Получатель;
	
	БП.Записать(); 
	БизнесПроцессыАИТП.ЗарегистрироватьДляВыполнения(БП, ТекущиеОперации, ВлияетНаОперации);
	
КонецПроцедуры

// Отправляет сообщение нескольким получателям
//
// Параметры:
//  Получатели		 - Массив, ВыборкаИзРезультатаЗапроса	 - список получателей
//  Данные			 - Структура, Соответствие	 - данные для отправки
//  ТекущиеОперации	 - Массив	 - массив зависимостей текущей операции
//  ВлияетНаОперации - Массив	 - массив зависимостей, на которые влияет текущая операция
//  Объект			 - ЛюбаяСсылка	 - владелец данных
//  ИмяРеквизита	 - Строка	 - имя реквизита - получателя в списке получателей
//
Процедура ОтправитьСообщениеПолучателям(Получатели, Данные, ТекущиеОперации, ВлияетНаОперации, Объект, ИмяРеквизита)
	
	Если Не Объект = Неопределено Тогда
		ДобавитьЗависимостиПредыдущейВерсии(ТекущиеОперации, ВлияетНаОперации, Объект);	
	КонецЕсли;
	
	БП = БизнесПроцессы.ОтправитьСообщениеОбменаПолучателямАИТП.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	
	Если ТипЗнч(Получатели) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Пока Получатели.Следующий() Цикл
			
			Получатель = Получатели[ИмяРеквизита];
			ТелоСообщения = СформироватьТелоСообщения(Получатель, Данные);
			НовыйПолучатель = БП.Получатели.Добавить();
			НовыйПолучатель.Получатель = Получатель;
			НовыйПолучатель.ТелоСообщения = ТелоСообщения;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ЭлементПолучатель Из Получатели Цикл
			
			Если Не ИмяРеквизита = Неопределено Тогда
				Получатель = ЭлементПолучатель[ИмяРеквизита];
			Иначе
				Получатель = ЭлементПолучатель;
			КонецЕсли;
			
			ТелоСообщения = СформироватьТелоСообщения(Получатель, Данные);
			НовыйПолучатель = БП.Получатели.Добавить();
			НовыйПолучатель.Получатель = Получатель;
			НовыйПолучатель.ТелоСообщения = ТелоСообщения;
			
		КонецЦикла;
		
	КонецЕсли;
		
	БП.Записать();
	БизнесПроцессыАИТП.ЗарегистрироватьДляВыполнения(БП, ТекущиеОперации, ВлияетНаОперации);
	
КонецПроцедуры

// Формирует тело сообщения
//
// Параметры:
//  Получатель	 - СправочникСсылка.ПолучателиСообщенийОбменаАИТП	 - получатель сообщения
//  Данные		 - Структура, Соответствие	 - данные для передачи
// 
// Возвращаемое значение:
// Строка  - тело сообщения
//
Функция СформироватьТелоСообщения(Получатель, Данные)
	
	Если ТипЗнч(Получатель.НастройкиТранспорта) = Тип("СправочникСсылка.НастройкиHTTPСервисовАИТП") Тогда 
		
		ДанныеСообщение = Новый Структура;
		ДанныеСообщение.Вставить("SenderCode", Константы.ТекущийУзелОбменаАИТП.Получить().Код);
		ДанныеСообщение.Вставить("MessageID", Строка(Новый УникальныйИдентификатор));
		ДанныеСообщение.Вставить("Data", Данные);
	
	ИначеЕсли ТипЗнч(Получатель.НастройкиТранспорта) = Тип("СправочникСсылка.НастройкиWebСервисовАИТП") Тогда
		ДанныеСообщение = Данные;	
	Иначе
		ВызватьИсключение "Неизвестный вид транспорта.";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеСообщение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

