//////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Реализация действий бизнес-процесса СоздатьПользователяИнформационнойБазыАИТП
//
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Реализация регламентного задания для отправки http-запросов
//
Процедура СоздатьПользователейИнформационнойБазыАИТП() Экспорт
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ВыполнитьДействияПоТочкеМаршрута(
		БизнесПроцессы.СоздатьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		, "СоздатьПользователяИнформационнойБазыАИТП.ОбработчикВыполнитьДействиеСоздатьПользователяИнформационнойБазы"
		, // Обработчик перед выполнением действий
		, // Обработчик после выполнения действий
		, // Обработчик ошибки при выполнении действия
		, // Обработчик ошибки перед выполнением действий
		, // Обработчик ошибки после выполнения действий
		, // Обработчик оповещения при выполнении действия
		, // Обработчик оповещения перед выполнением действий
		, // Обработчик оповещения после выполнения действий
	);

КонецПроцедуры

// Реализация действия отправки http-запроса
//
Процедура ОбработчикВыполнитьДействиеСоздатьПользователяИнформационнойБазы(ТочкаМаршрута, Задача, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцесс = Задача.БизнесПроцесс;
	
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.Имя = БизнесПроцесс.Имя;
	ПользовательИБ.ПолноеИмя = БизнесПроцесс.ПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная = БизнесПроцесс.АутентификацияСтандартная;
	
	Пароль = КонфиденциальныеДанныеАИТП.ПолучитьКонфиденциальныеДанныеКакСтроку(БизнесПроцесс);
	
	Если Не Пароль = Неопределено Тогда
		ПользовательИБ.Пароль = Пароль; 
	КонецЕсли;
	
	ПользовательИБ.ПоказыватьВСпискеВыбора = БизнесПроцесс.ПоказыватьВСпискеВыбора;
	ПользовательИБ.ЗапрещеноИзменятьПароль = БизнесПроцесс.ЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияOpenID = БизнесПроцесс.АутентификацияOpenID;
	ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = БизнесПроцесс.ПредупреждатьОбОпасныхДействиях;
	ПользовательИБ.АутентификацияОС = БизнесПроцесс.АутентификацияОС;
	ПользовательИБ.ПользовательОС = БизнесПроцесс.ПользовательОС;
	
	Язык = Метаданные.Языки.Найти(БизнесПроцесс.Язык);
	Если Не Язык = Неопределено Тогда
		ПользовательИБ.Язык = Язык;
	КонецЕсли;
	
	Для каждого Роль Из БизнесПроцесс.Роли Цикл
		ПользовательИб.Роли.Добавить(Метаданные.Роли.Найти(Роль.Роль));
	КонецЦикла;
	
	ПользовательИБ.Записать();
	ДополнительныеДанныеАИТП.ВставитьДополнительныеДанные(БизнесПроцесс, "УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти