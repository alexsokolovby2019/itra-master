////////////////////////////////////////////////////////////////////////////////
//
// Низкоуровневые функции для работы с HTTP
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Отправляет синхронный HTTP-запрос. Новая версия
//
// Параметры:
//  ТипЗапроса			 - Строка	 - определяет используемый http метод для выполнения запроса 
//  Url					 - Строка	 - url запроса
//  НастройкиСоединения	 - Справочники.НастройкиHTTPСоединенийАИТП, Структура	 - настройки http-соединения
//  ТелоЗапроса			 - Строка	 - тело запроса
//  Заголовки			 - Соответствие	 - список заголовков
// 
// Возвращаемое значение:
//   -  Структура - содержит поля КодСостояния и ТелоОтвета
//
Функция ОтправитьЗапрос(ТипЗапроса = "GET", Url, НастройкиСоединения, ТелоЗапроса = "", Заголовки = Неопределено) Экспорт

	ОбъектОтвет = НовыйHTTPОтвет();
	ЧастиUrl = ПолучитьЧастиURL(Url);
	
	Запрос = Новый HTTPЗапрос();
	Запрос.АдресРесурса = ЧастиUrl.ОтносительныйUrl;
	
	Таймаут = НастройкиСоединения.Таймаут;
		
	ЗащищенноеСоединение = Неопределено;	
	
	Если ЧастиURL.Протокол = "HTTPS" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();	
	КонецЕсли;
	
	Прокси = Неопределено;
	
	Если Не НастройкиСоединения.ПроксиСервер = Справочники.СетевыеХостыАИТП.ПустаяСсылка() Тогда
		
		Прокси = Новый ИнтернетПрокси;
		ПользовательПрокси = Неопределено;
		ПарольПрокси = Неопределено;
		
		Если НастройкиСоединения.ПроксиИспользоватьПроверкуПодлинностиОС = Ложь 
			И Не НастройкиСоединения.УчетныеДанныеПрокси = Справочники.УчетныеДанныеАИТП.ПустаяСсылка() Тогда
			
			ПользовательПрокси = НастройкиСоединения.УчетныеДанныеПрокси.Логин;
			
			УстановитьПривилегированныйРежим(Истина);
			ПарольПрокси = Справочники.УчетныеДанныеАИТП.ПолучитьПароль(НастройкиСоединения.УчетныеДанныеПрокси);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если ПользовательПрокси = Неопределено Тогда
		Прокси.Установить(
			ЧастиUrl.Протокол
			, НастройкиСоединения.ПроксиСервер.ИмяХоста
			, НастройкиСоединения.ПортПрокси
			, //ПользовательПрокси
			, //ПарольПрокси
			, НастройкиСоединения.ПроксиИспользоватьПроверкуПодлинностиОС
		);
		Иначе
		Прокси.Установить(
			ЧастиUrl.Протокол
			, НастройкиСоединения.ПроксиСервер.ИмяХоста
			, НастройкиСоединения.ПортПрокси
			, ПользовательПрокси
			, ПарольПрокси
			, НастройкиСоединения.ПроксиИспользоватьПроверкуПодлинностиОС
		);
		КонецЕсли;
		
	КонецЕсли;
	
	Пользователь = Неопределено;
	Пароль = Неопределено;
	
	Если Не НастройкиСоединения.ИспользоватьПроверкуПодлинностиОС = Истина 
		И Не НастройкиСоединения.УчетныеДанные = Справочники.УчетныеДанныеАИТП.ПустаяСсылка() Тогда
		
		Пользователь = НастройкиСоединения.УчетныеДанные.Логин;
		
		УстановитьПривилегированныйРежим(Истина);
		Пароль = Справочники.УчетныеДанныеАИТП.ПолучитьПароль(НастройкиСоединения.УчетныеДанные);
		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		ЧастиUrl.Сервер
		, ЧастиUrl.Порт
		, Пользователь
		, Пароль
		, Прокси
		, Таймаут
		, ЗащищенноеСоединение
		, НастройкиСоединения.ИспользоватьПроверкуПодлинностиОС
	);
	
	Если ТипЗапроса = "GET" Тогда
		
		Если Заголовки = Неопределено Тогда
			Заголовки = Новый Соответствие();
			Заголовки.Вставить("Content-Type", "text;charset=utf-8");
		КонецЕсли;	
		
		Запрос.Заголовки = Заголовки;
		Ответ = Соединение.Получить(Запрос);
	
	Иначе
		
		Если Заголовки = Неопределено Тогда
			Заголовки = Новый Соответствие();
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		КонецЕсли;	
		
		Запрос.Заголовки = Заголовки;
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);

	КонецЕсли;
	
	ОбъектОтвет.КодСостояния = Ответ.КодСостояния;
	ОбъектОтвет.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Возврат ОбъектОтвет;
	
КонецФункции // ОтправитьHTTPЗапрос()

// Преобразует строку в последовательность % в кодировке UTF8
//
// Параметры:
//  СтрокаСимволов	 - Строка	 - исходная строка
// 
// Возвращаемое значение:
//   - <Строка>   - escape последовательность
//
Функция Escape(СтрокаСимволов) Экспорт
	
	КоличествоСимволов = СтрДлина(СтрокаСимволов);
	EscapeСтрока = "";
	Индекс = 1;
	Пока Индекс <= КоличествоСимволов Цикл
		
		Код = КодСимвола(СтрокаСимволов, Индекс);
		КоличествоБайтов = 0;
		ЧислоПервогоБайта = 0;
		ЧислоПослБайтов = 128;
		
		КодПервогоБайта = 0;
		КодВторогоБайта = 0;
		КодТретьегоБайта = 0;
		КодЧетвертогоБайта = 0;
		
		Если Код < 128 Тогда
			// 1 байт ASCII
			Если (Код > 64  И Код < 91) Или (Код > 96 И Код < 123) Тогда
				EscapeСтрока = EscapeСтрока + Сред(СтрокаСимволов, Индекс, 1);
			Иначе
				EscapeСтрока = EscapeСтрока + EscapeСимвол(Код);
			КонецЕсли;

		ИначеЕсли Код < 2048 И Код > 127 Тогда
			// 2 Байта
			КоличествоБайтов = 2;
			ЧислоПервогоБайта = 192;
			КодВторогоБайта = 128 + (Код % 64);
			КодПервогоБайта =  192 + (Код - (Код % 64)) / 64;
			
			EscapeСтрока = EscapeСтрока + EscapeСимвол(КодПервогоБайта) 
										+ EscapeСимвол(КодВторогоБайта);
			
		ИначеЕсли Код < 65536 И Код > 2047 Тогда
			// 3 Байта
			КоличествоБайтов = 3;
			ЧислоПервогоБайта = 224;
			КодТретьегоБайта = (Код % 64);
			КодВторогоБайта = ((Код % 4096) - КодТретьегоБайта) / 64;
			КодПервогоБайта = (Код - (Код % 4096)) / 4096;
			КодПервогоБайта = ЧислоПервогоБайта + КодПервогоБайта;
			КодВторогоБайта = ЧислоПослБайтов + КодВторогоБайта;
			КодТретьегоБайта = ЧислоПослБайтов + КодПервогоБайта;
			EscapeСтрока = EscapeСтрока + EscapeСимвол(КодПервогоБайта)
										+ EscapeСимвол(КодВторогоБайта)
										+ EscapeСимвол(КодТретьегоБайта);
										
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат EscapeСтрока;
	
КонецФункции // Escape()

// Переобразует строку % в кодировке UTF8 в строку
//
// Параметры:
//  СтрокаСимволов	 - Строка	 - Строка символов, закодированных в Escape последовательность
// 
// Возвращаемое значение:
//  Строка - Раскодированная строка
//
Функция Unescape(СтрокаСимволов) Экспорт
	
	СтрокаРазбора = СтрокаСимволов;
	UnescapeСтрока = "";
	
	Пока СтрДлина(СтрокаРазбора) > 0 Цикл
		
		Индекс = Найти(СтрокаРазбора, "%");
		
		Если Индекс > 0 Тогда
			UnescapeСтрока = UnescapeСтрока + Лев(СтрокаРазбора, Индекс - 1);
			СтрокаРазбора = Сред(СтрокаРазбора, Индекс);
		Иначе
			UnescapeСтрока = UnescapeСтрока + СтрокаРазбора;
			СтрокаРазбора = "";
			Возврат UnescapeСтрока;
		КонецЕсли;
		
		Если СтрДлина(СтрокаРазбора) < 3 Тогда
			UnescapeСтрока = UnescapeСтрока + СтрокаРазбора;
			СтрокаРазбора = "";
			Возврат UnescapeСтрока;
		КонецЕсли;
		
		СтрокаПервыйБайт = Лев(СтрокаРазбора, 3); 
		КодПервыйБайт = UnescapeСимвол(СтрокаПервыйБайт);
		
		Если СтрДлина(СтрокаРазбора) > 3 Тогда
			СтрокаРазбора = Сред(СтрокаРазбора, 4);
		Иначе
     		СтрокаРазбора = "";
		КонецЕсли;
		
		Если КодПервыйБайт = -1 Тогда
			// Не Escape последовательность
			UnescapeСтрока = UnescapeСтрока + СтрокаПервыйБайт;
			
		ИначеЕсли КодПервыйБайт < 128 Тогда
			// Один символ
			UnescapeСтрока = UnescapeСтрока + Символ(КодПервыйБайт);
			
		ИначеЕсли КодПервыйБайт >= 192 И КодПервыйБайт <= 223 И СтрДлина(СтрокаРазбора) >= 3 Тогда
			// Два байта
			// Читаем второй байт
			СтрокаВторойБайт = Лев(СтрокаРазбора, 3);
			КодВторойБайт = UnEscapeСимвол(СтрокаВторойБайт);
			
			Если СтрДлина(СтрокаРазбора) > 3 Тогда
				СтрокаРазбора = Сред(СтрокаРазбора, 4);
			Иначе
     			СтрокаРазбора = "";
			КонецЕсли;

			Если КодВторойБайт >= 128 И КодВторойБайт <= 191 Тогда
				UnescapeСтрока = UnescapeСтрока + Символ( (КодПервыйБайт % 32)*64 + (КодВторойБайт % 64) );	
			Иначе
				UnescapeСтрока = UnescapeСтрока + СтрокаПервыйБайт;
			КонецЕсли;
						
		ИначеЕсли КодПервыйБайт >= 224 И КодПервыйБайт <= 239 И СтрДлина(СтрокаРазбора) >= 6 Тогда
			// Три байта
			// Читаем второй байт
			// Читаем третий байт
			СтрокаВторойБайт = Лев(СтрокаРазбора, 3);
			СтрокаТретийБайт = Сред(СтрокаРазбора, 4, 3);
			
			Если СтрДлина(СтрокаРазбора) > 6 Тогда
				СтрокаРазбора = Сред(СтрокаРазбора, 7);
			Иначе
     			СтрокаРазбора = "";
			КонецЕсли;
			
			КодВторойБайт = UnEscapeСимвол(СтрокаВторойБайт);
			КодТретийБайт = UnEscapeСимвол(СтрокаТретийБайт);
			
			Если КодВторойБайт >= 128 И КодВторойБайт <= 191 И КодТретийБайт >= 128 И КодТретийБайт <= 191 Тогда
				UnescapeСтрока = UnescapeСтрока + Символ (
					(КодТретийБайт % 64) + (КодВторойБайт % 64)*64 + (КодПервыйБайт % 32)*4096 );
			Иначе
				UnescapeСтрока = UnescapeСтрока + СтрокаПервыйБайт + СтрокаВторойБайт + СтрокаТретийБайт;		
			КонецЕсли;
		Иначе
			UnescapeСтрока = UnescapeСтрока + СтрокаПервыйБайт;
		КонецЕсли;
		
	КонецЦикла;
			
	Возврат UnescapeСтрока;
	
КонецФункции

// Проверяет код состояния ответа с заданым. Если не совпадают - генерирует исключение
//
// Параметры:
//  Ответ  - Структура - Данные http ответа
//  КодСостояния  - Число - эталонный код состояния
//  ОписаниеИсключения  - Строка - описание исключения. Добавляется в генерируемое исключение
//
Процедура ПроверитьКодСостояния(Ответ, КодСостояния, ОписаниеИсключения = "") Экспорт

	Если Не Ответ.КодСостояния = КодСостояния Тогда
		
		ВызватьИсключение ОписаниеИсключения 
			+ Символы.ВК + "Код ответа: " + Строка(Ответ.КодСостояния)
			+ Символы.ВК + "Тело ответа: " 
			+ Символы.ВК + Ответ.ТелоОтвета;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьКодСостояния()

// Получает параметры из тела запроса
//
// Параметры:
//  Url  - Строка - строка, содержащая текст вида ?cmd=Значение1&cmd1=Значение2
//
// Возвращаемое значение:
//   Соответствие   - Список имен параметров и соответствующих им значений
//
Функция ПолучитьПараметры(Url) Экспорт
	
	ПараметрыЗапроса = Новый Соответствие();
	СтрокаРазбора = Url;
	
	Если Найти(СтрокаРазбора, "/") = 1 Тогда
		СтрокаРазбора = Сред(СтрокаРазбора, 2);
	КонецЕсли;
	
	Если Найти(СтрокаРазбора, "?") = 1 Тогда
		СтрокаРазбора = Сред(СтрокаРазбора, 2);
	КонецЕсли;

	Пока СтрДлина(СтрокаРазбора) > 0 Цикл
		
		Индекс = Найти(СтрокаРазбора, "&");
		
		Если Индекс > 0 Тогда
			СтрокаПараметр = Лев(СтрокаРазбора, Индекс - 1);
			СтрокаРазбора = Сред(СтрокаРазбора, Индекс + 1);
		Иначе
			СтрокаПараметр = СтрокаРазбора;
			СтрокаРазбора = "";
		КонецЕсли;
		
		ИндексИмя = Найти(СтрокаПараметр, "=");
		
		Если ИндексИмя > 0 Тогда
			
			СтрокаИмя = Лев(СтрокаПараметр, ИндексИмя - 1);
			СтрокаЗначение = Сред(СтрокаПараметр, ИндексИмя + 1);
			ПараметрыЗапроса.Вставить(СтрокаИмя, Unescape(СтрокаЗначение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции // ПолучитьПараметры()

// Конвертирует структуру в строку параметров http запроса вида param1=12&param2=Hello... из структуры.
// Имя параметра - ключ, значение - значение соответствующего поля
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры http запроса
//
// Возвращаемое значение:
//   Строка   - строка вида Key1=value1&Key2=value2....
//
Функция СтруктуруВСтрокуПараметров(СтруктураПараметров) Экспорт

	СтрокаПараметров = "";
	
	Если Не СтруктураПараметров = Неопределено Тогда
	
		Для каждого Поле Из СтруктураПараметров Цикл
		
			СтрокаПараметров = СтрокаПараметров + "&" + Строка(Поле.Ключ) + "=" + Escape(Строка(Поле.Значение));
		
		КонецЦикла; 
		
		СтрокаПараметров = Сред(СтрокаПараметров, 2);
	
	КонецЕсли; 
	
	Возврат СтрокаПараметров;

КонецФункции // СформироватьТелоИзСтруктуры()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает структуру, содержащую данные ответа HTTP сервера 
//
// Параметры:
//
// Возвращаемое значение:
//   Структура   - данные ответа HTTP сервера
//
Функция НовыйHTTPОтвет()
	
	ОтветОбъект = Новый Структура;
	ОтветОбъект.Вставить("ТелоОтвета");
	ОтветОбъект.Вставить("КодСостояния");
	Возврат ОтветОбъект;
	
КонецФункции // СоздатьОбъектHTTPОтвет()

// Преобразует код символа в строку % в кодировке UTF8 
//
// Параметры:
//  <КодСимвола>  - <Число> - код символа
//
// Возвращаемое значение:
//   <Строка>   - строка вида %A8 шеснадтеричное представление кода символа
//
Функция EscapeСимвол(КодСимвола)
	
	table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    
    Возврат Сред( table, КодСимвола*3 + 1, 3 );   
	
КонецФункции // EscapeСимвол()

// Преобразует строку % символа в кодировке UTF8 в код
//
Функция UnescapeСимвол(КодСимвола16)
	
	table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
			
	Код = Найти(table, КодСимвола16);
	
	Возврат Цел(?(Код > 0, Код, -3) / 3);   
	
КонецФункции

// Создает структуру данных, содержащую части Url
//
// Параметры:
//
// Возвращаемое значение:
//   Структура   - Содержит данные частей Url.
//
Функция НовыйЧастиUrl()

	ЧастиUrl = Новый Структура;
	
	ЧастиUrl.Вставить("Протокол", Неопределено);
	ЧастиUrl.Вставить("Сервер", Неопределено);
	ЧастиUrl.Вставить("Порт", Неопределено);
	ЧастиUrl.Вставить("ОтносительныйUrl", "");
	
	Возврат ЧастиUrl;

КонецФункции // НовыйЧастиUrl()

// Разбивает url на части
// Используется для создания объектов HTTPЗапрос на основе Url
//
// Параметры:
//  Url  - Строка - Строка url вида (http://www.microsoft.com:8080/Pages)
//
// Возвращаемое значение:
//   Структура   - Содержит части url. Протокол, Сервер, Порт, Относительный Url etc.
//
Функция ПолучитьЧастиURL(Url) Экспорт
	
	ЧастиUrl = НовыйЧастиUrl();

	Индекс = Найти(Url,"://");
	
	Если Индекс > 0 Тогда
		ЧастиUrl.Протокол = ВРег(Лев(Url, Индекс - 1));
		Индекс = Индекс + 3;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтрока = Сред(Url, Индекс);
	
	Индекс = Найти(ТекСтрока, "?");
	
	Если Индекс > 0 Тогда
		ЧастиUrl.ОтносительныйUrl = Сред(ТекСтрока, Индекс);
		ТекСтрока = Сред(ТекСтрока, 1, Индекс -1);
	КонецЕсли;
	
	Индекс = Найти(ТекСтрока, "/");
	
	Если Индекс > 0 Тогда
		ЧастиUrl.ОтносительныйUrl = Сред(ТекСтрока, Индекс) + ЧастиUrl.ОтносительныйUrl;
		ТекСтрока = Сред(ТекСтрока, 1, Индекс - 1);
	КонецЕсли;
	
	Индекс = Найти(ТекСтрока, ":");
	
	Если Индекс > 0 Тогда
		// Есть порт
		ЧастиUrl.Порт = Число(Сред(ТекСтрока, Индекс + 1));
		ЧастиUrl.Сервер = Лев(ТекСтрока, Индекс - 1);		
	Иначе
		// Порт по умолчанию
		ЧастиUrl.Сервер = ТекСтрока;
	КонецЕсли;
	
	Если ЧастиUrl.Порт = Неопределено Тогда
		
		Если ВРег(ЧастиUrl.Протокол) = "HTTP" Тогда
			
			ЧастиUrl.Порт = 80;
			
		ИначеЕсли ВРег(ЧастиUrl.Протокол) = "HTTPS" Тогда
			
			ЧастиUrl.Порт = 443;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЧастиUrl;
	
КонецФункции // ПолучитьЧастиURL()

#КонецОбласти 
