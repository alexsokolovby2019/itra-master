///////////////////////////////////////////////////////////////////////////////////
//
// Функции, используемые компонентами подсистемы обновления
//
//////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает список параметров использования РЗ, сохраненных для объекта
//
// Параметры:
//  ОбъектСсылка - ЛюбаяСсылка	 - ссылка на объект, который содержит данные
// 
// Возвращаемое значение:
// Соответствие  - список параметров использования РЗ
//
Функция ПолучитьПараметрыИспользованияРегламентныхЗаданий(ОбъектСсылка) Экспорт
	
	Возврат ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(ОбъектСсылка, "ПараметрыИспользованияРегламентныхЗаданий");
	
КонецФункции

// Сохраняет параметры использования РЗ для объекта
//
// Параметры:
//  ОбъектСсылка			 - ЛюбаяСсылка	 - ссылка на объект
//  ПараметрыИспользования	 - Соответствие	 - список параметров использования
//
Процедура ВставитьПараметрыИспользованияРегламентныхЗаданий(ОбъектСсылка, ПараметрыИспользования) Экспорт
	
	ДополнительныеДанныеАИТП.ВставитьДополнительныеДанные(ОбъектСсылка, "ПараметрыИспользованияРегламентныхЗаданий", ПараметрыИспользования);
	
КонецПроцедуры

// Формирует список параметров использования предопределенных регламентных заданий
// 
// Возвращаемое значение:
// Соответствие  - список параметров использования предопределенных рз
//
Функция СформироватьПараметрыИспользованияРегламентныхЗаданий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыИспользования = Новый Соответствие;
	
	Для каждого МетаданныеРегламентноеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		Если МетаданныеРегламентноеЗадание.Предопределенное = Истина Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеРегламентноеЗадание);
			ПараметрыИспользования.Вставить(МетаданныеРегламентноеЗадание.ПолноеИмя(), РегламентноеЗадание.Использование); 			
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыИспользования;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик оповещения для бизнес-процессов подсистемы обновления
//
// Параметры:
//  ПараметрыОповещения	 - Соответствие	 - параметры оповещения
//
Процедура ОбработчикОповещения(ПараметрыОповещения) Экспорт
	
	Тема = Неопределено;
	Тело = Неопределено;
	ПолучателиОповещения = Новый Массив;
	
	ОповещениеПользователейАИТП.ОпределитьПолучателейОповещенияСтандартнаяОбработка(ПолучателиОповещения, ПараметрыОповещения);
	ОповещениеПользователейПоЭлектроннойПочтеАИТП.ЗаполнитьТемуИТелоСообщения(Тема, Тело, ПараметрыОповещения);	
	
	Если ПолучателиОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Тема = Неопределено И Тело = Неопределено Тогда 
		Возврат;
	ИначеЕсли Тема = Неопределено Тогда
		Тема = "";
	ИначеЕсли Тело = Неопределено Тогда
		Тело = "";
	КонецЕсли;
	
	ОтправкаСообщенийПоЭлектроннойПочтеВызовСервераАИТП.ОтправитьСообщениеАсинхронно(
		ПолучателиОповещения
		, Тело
		, Тема
		, 
		, Константы.ТипТекстаСообщенийЭлектроннойПочтыАИТП.Получить()
	);
	
КонецПроцедуры

// Разрешает старт регламентных заданий
//
Процедура РазрешитьСтартФоновыхЗаданийПроцессов(ПараметрыИспользования) Экспорт
	
	Если ПараметрыИспользования = Неопределено Тогда
		ПараметрыИспользования = Новый Соответствие;
	КонецЕсли;
	
	// Создаем список системных заданий-исключений
	ЗаданияИсключения = ПолучитьСписокНеБлокируемыхРегламентныхЗаданий();
	
	// Разрешаем выполнение заданий
	Для каждого МетаданныеРегламентноеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		Если ЗаданияИсключения.Получить(МетаданныеРегламентноеЗадание) = Неопределено
			И МетаданныеРегламентноеЗадание.Предопределенное = Истина Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеРегламентноеЗадание);
			
			Если Не ПараметрыИспользования.Получить(МетаданныеРегламентноеЗадание.ПолноеИмя()) = Ложь Тогда
				РегламентноеЗадание.Использование = Истина;
				РегламентноеЗадание.Записать();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;

	// Разрешаем выполнение задач, ожидающих выполнения
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ВыполнитьОжидающиеВыполненияЗадачиАИТП");
	РегламентноеЗадание.Использование = Истина;
	РегламентноеЗадание.Записать();

	// Разрешаем старт новых процессов
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("СтартоватьПроцессыАИТП");
	РегламентноеЗадание.Использование = Истина;
	РегламентноеЗадание.Записать();

КонецПроцедуры

// Обработчик проведения документа ПодготовитьСистемуКОбновлениюАИТП
//
// Параметры:
//  Источник		 - ДокументОбъект.ПодготовитьСистемуКОбновлениюАИТП	 - источник подписки
//  Отказ			 - Булево	 - если Истина - проведение отменяется
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения документа 
//
Процедура ПодготовитьСистемуКОбновлениюАИТПОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	// Вставить содержимое обработчика.
	УстановитьПривилегированныйРежим(Истина);
	ВыполняющийсяПроцесс = ПолучитьВыполняющийсяПроцесс();
	
	Если Не ВыполняющийсяПроцесс = Неопределено Тогда
		
		Отказ = Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "В системе уже имеются выполняющийся процесс: " + Строка(ВыполняющийсяПроцесс);
		СообщениеПользователю.УстановитьДанные(ВыполняющийсяПроцесс);
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	БП = БизнесПроцессы.ПодготовитьСистемуКОбновлениюАИТП.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	БП.ДатаНачала = Источник.ДатаНачалаОбновления;
	БП.ОтменитьПриВозникновенииОшибок = Источник.ОтменитьПриВозникновенииОшибок;
	БП.Записать();
	ИдентификаторПроцесса = БП.Ссылка.УникальныйИдентификатор();
	ДополнительныеДанныеАИТП.ВставитьДополнительныеДанные(Источник.Ссылка, "СвязанныйПроцесс", ИдентификаторПроцесса);
	БП.Старт();
	
КонецПроцедуры

// Процедура - обработчик проведения документа ВыполнитьДействияПослеОбновленияАИТП
//
// Параметры:
//  Источник		 - ДокументОбъект.ВыполнитьДействияПослеОбновленияАИТП	 - источник подписки 
//  Отказ			 - Булево	 - если Истина проведение отменяется 
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения документа
//
Процедура ВыполнитьДействияПослеОбновленияАИТПОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	// Вставить содержимое обработчика.
	УстановитьПривилегированныйРежим(Истина);
	ВыполняющийсяПроцесс = ПолучитьВыполняющийсяПроцесс();
	
	Если Не ВыполняющийсяПроцесс = Неопределено Тогда
		
		Отказ = Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "В системе уже имеются выполняющийся процесс: " + Строка(ВыполняющийсяПроцесс);
		СообщениеПользователю.УстановитьДанные(ВыполняющийсяПроцесс);
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
		
	БП = БизнесПроцессы.ВыполнитьДействияПослеОбновленияАИТП.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	БП.Записать();
	
	Если Не Источник.Основание.Пустая() Тогда
		
		ИдентификаторПроцесса = ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(Источник.Основание, "СвязанныйПроцесс");
		
		Если Не ИдентификаторПроцесса = Неопределено Тогда
			
			ПроцессCсылка = БизнесПроцессы.ПодготовитьСистемуКОбновлениюАИТП.ПолучитьСсылку(ИдентификаторПроцесса);
			
			Если Не ПроцессCсылка.ПолучитьОбъект() = Неопределено Тогда
				
				ПараметрыИспользованияРЗ = ОбновлениеСистемыАИТП.ПолучитьПараметрыИспользованияРегламентныхЗаданий(ПроцессCсылка);
				
				Если Не ПараметрыИспользованияРЗ = Неопределено Тогда
					
					ОбновлениеСистемыАИТП.ВставитьПараметрыИспользованияРегламентныхЗаданий(БП.Ссылка, ПараметрыИспользованияРЗ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
	БП.Старт();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие выполняющихся процессов по подготовке к обновлению или действий после обновления
// 
// Возвращаемое значение:
//   - БизнесПроцессСсылка.ПодготовитьСистемуКОбновлениюАИТП, БизнесПроцессСсылка.ВыполнитьДействияПослеОбновленияАИТП, Неопределено - если процессов нет
//
Функция ПолучитьВыполняющийсяПроцесс()
	
	// Проверяем наличие выполняющихся процессов по подготовке системы к обновлению
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПодготовитьСистемуКОбновлениюАИТП.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.ПодготовитьСистемуКОбновлениюАИТП КАК ПодготовитьСистемуКОбновлениюАИТП
	                      |ГДЕ
	                      |	ПодготовитьСистемуКОбновлениюАИТП.Завершен = &Завершен
	                      |	И ПодготовитьСистемуКОбновлениюАИТП.ПометкаУдаления = &ПометкаУдаления
	                      |	И ПодготовитьСистемуКОбновлениюАИТП.Стартован = &Стартован");
	
	Запрос.УстановитьПараметр("Завершен", Ложь);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Стартован", Истина);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	// Проверяем наличие выполняющихся процессов по выполнению действий после обновления
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВыполнитьДействияПослеОбновленияАИТП.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.ВыполнитьДействияПослеОбновленияАИТП КАК ВыполнитьДействияПослеОбновленияАИТП
	                      |ГДЕ
	                      |	ВыполнитьДействияПослеОбновленияАИТП.Завершен = &Завершен
	                      |	И ВыполнитьДействияПослеОбновленияАИТП.ПометкаУдаления = &ПометкаУдаления
	                      |	И ВыполнитьДействияПослеОбновленияАИТП.Стартован = &Стартован");
	
	Запрос.УстановитьПараметр("Завершен", Ложь);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Стартован", Истина);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует список не блокируемых регламентных заданий
// 
// Возвращаемое значение:
// Соответствие  - список не блокируемых РЗ
//
Функция ПолучитьСписокНеБлокируемыхРегламентныхЗаданий() Экспорт
	
	// Создаем список системных заданий-исключений
	ЗаданияИсключения = Новый Соответствие;
	
	МетаданныеРегламентныеЗадания = Метаданные.Подсистемы.ОбновлениеСистемыАИТП.Подсистемы.НеБлокируемыеПриОбновленииРегламентныеЗадания.Состав;
	
	Для каждого МетаданныеРегламентноеЗадание Из МетаданныеРегламентныеЗадания Цикл
		ЗаданияИсключения.Вставить(МетаданныеРегламентноеЗадание, МетаданныеРегламентноеЗадание);
	КонецЦикла;
	// Добавляем в список пользовательские задания-исключения
	МетаданныеРегламентныеЗадания = Метаданные.Подсистемы.НеБлокируемыеПриОбновленииРегламентныеЗаданияАИТП.Состав;
	
	Для каждого МетаданныеРегламентноеЗадание Из МетаданныеРегламентныеЗадания Цикл
		ЗаданияИсключения.Вставить(МетаданныеРегламентноеЗадание, МетаданныеРегламентноеЗадание);
	КонецЦикла;
	
	Возврат ЗаданияИсключения;

КонецФункции

#КонецОбласти