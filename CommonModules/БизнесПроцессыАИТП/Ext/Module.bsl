/////////////////////////////////////////////////////////////////////////////////
//
// Функции для работы с бизнес-процессами
//
/////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФункцииКартыМаршрутаБП

// Вызывается в конце обработчика ПередСтартом, точки Старт
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса	 - ТочкаМаршрутаБизнесПроцесса	 - точка маршрута бизнес-процесса
//  БизнесПроцесс				 - 	БизнесПроцессСсылка, БизнесПроцессОбъект - ссылка или объект бизнес-процесса
//  ОбработчикОповещения		 - Строка	 - Имя функции - обработчика оповещения
//
Процедура ПередСтартомБП(ТочкаМаршрутаБизнесПроцесса, БизнесПроцесс, ОбработчикОповещения = Неопределено) Экспорт

	МенеджерЗаписи = РегистрыСведений.ДополнительныеРеквизитыПроцессовАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.ДатаСтарта = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);

	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПередСтартомПроцесса;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	ПараметрыОповещения["БизнесПроцесс"] = БизнесПроцесс;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрутаБизнесПроцесса;
	
	Если Не ОбработчикОповещения = Неопределено Тогда
		Выполнить( ОбработчикОповещения + "(ПараметрыОповещения);");
	Иначе
		ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

// Вызывается в конце обработчика ПриЗавершении, точки Завершение бизнес-процесса
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса	- ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса
//  БизнесПроцесс				 - БизнесПроцессСсылка, БизнесПроцессОбъект - бизнес-процесс 
//  Результат					 - Перечисление.РезультатыВыполненияДействияАИТП - результат выполнения бизнес-процесса 
//  ДальнейшиеДействия			 - Перечисление.ДальнейшиеДействияАИТП - дальнейшие действия 
//  Ошибка						 - ДокументСсылка.ОшибкиВыполненияАИТП - ошибка выполнения, если таковая возникла 
//  ОбработчикОповещения		 - Строка -  Имя функции обработчика оповещения 
//
Процедура ПриЗавершенииБП(ТочкаМаршрутаБизнесПроцесса, БизнесПроцесс, Результат = Неопределено, ДальнейшиеДействия = Неопределено, Ошибка = Неопределено, ОбработчикОповещения = Неопределено) Экспорт

	МенеджерЗаписи = РегистрыСведений.ДополнительныеРеквизитыПроцессовАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.ДатаЗавершения = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	
	Если (Не Результат = Неопределено
		Или Не ДальнейшиеДействия = Неопределено)
		И Не БизнесПроцесс.ВедущаяЗадача = Задачи.ЗадачаАИТП.ПустаяСсылка() 
		И Не БизнесПроцесс.ВедущаяЗадача = Неопределено Тогда
		
		ВедущаяЗадача = БизнесПроцесс.ВедущаяЗадача.ПолучитьОбъект();
		
		Если Не Результат = Неопределено Тогда
			ВедущаяЗадача.Результат = Результат;
		КонецЕсли;
		
		Если Не Ошибка = Неопределено Тогда
			ВедущаяЗадача.Ошибка = Ошибка;
		КонецЕсли;
		
		Если Не ДальнейшиеДействия = Неопределено Тогда
			ВедущаяЗадача.ДальнейшиеДействия = ДальнейшиеДействия;
		КонецЕсли;
		
		ВедущаяЗадача.Записать();
		
	КонецЕсли;
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриЗавершенииПроцесса;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	ПараметрыОповещения["БизнесПроцесс"] = БизнесПроцесс;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрутаБизнесПроцесса;
	
	Если Не ОбработчикОповещения = Неопределено Тогда
		Выполнить( ОбработчикОповещения + "(ПараметрыОповещения);");
	Иначе
		ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
	КонецЕсли;
	
	БизнесПроцессыАИТП.СтартоватьПроцессыАсинхронно();

КонецПроцедуры

// Вызывается в конце обработчика ПриСоздании, точки Действие
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса	 - ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса 
//  Задача						 - Задача.ЗадачаАИТП - выполняемая задача 
//  ВидЗадачи					 - Перечисление.ВидыЗадачАИТП - вид выполняемой задачи 
//  ИмяРегламентногоЗадания		 - Строка - Имя регламентного задания, которое реализует выполнение задачи 
//  ОбработчикОповещения		 - Строка  - Имя функции обработчика оповещения 
//
Процедура ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача, ВидЗадачи = Неопределено, ИмяРегламентногоЗадания = Неопределено, ОбработчикОповещения = Неопределено) Экспорт
	
	Если Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.ПустаяСсылка() Тогда
		
		Если ВидЗадачи = Неопределено Тогда
			Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.Действие;
		Иначе
			Задача.ВидЗадачи = ВидЗадачи;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.ПустаяСсылка() Тогда 
		
		Если Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.ОбработкаОшибки Тогда
			
			Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Повторить;
			
		ИначеЕсли Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.Ожидание Тогда 
			
			Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Продолжить;
			
		ИначеЕсли Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.Действие Тогда
			
			Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Продолжить;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Задача.ВидЗадачи = Перечисления.ВидыЗадачАИТП.ОбработкаОшибки
		И Задача.СпособВыполнения = Перечисления.СпособыВыполненияЗадачАИТП.ПустаяСсылка() Тогда
		
		Задача.СпособВыполнения  = Перечисления.СпособыВыполненияЗадачАИТП.Интерактивно;
		
	ИначеЕсли Задача.СпособВыполнения = Перечисления.СпособыВыполненияЗадачАИТП.ПустаяСсылка() Тогда
		
		Задача.СпособВыполнения = Перечисления.СпособыВыполненияЗадачАИТП.Автоматически;	
		
	КонецЕсли;
	
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;

	Задача.Записать();
	
	// Вызываем выполнение регламентного задания точки маршрута
	Если Не ИмяРегламентногоЗадания = Неопределено Тогда
		СтартоватьРегламентноеЗаданиеАсинхронно(ИмяРегламентногоЗадания);		
	КонецЕсли;
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриСозданииЗадачи;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	ПараметрыОповещения["Задача"] = Задача;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрутаБизнесПроцесса;
	
	Если Не ОбработчикОповещения = Неопределено Тогда
		Выполнить( ОбработчикОповещения + "(ПараметрыОповещения);");
	Иначе
		ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в конце обработчика ПриВыполнении, точки Действие
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса	 - ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса 
//  Задача						 -  Задача.ЗадачаАИТП - выполняемая задача 
//  ОбработчикОповещения		 - Строка - имя функции-обработчика оповещения 
//
Процедура ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача, ОбработчикОповещения = Неопределено) Экспорт
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗаполнитьРеквизитыПриВыполненииЗадачи(ЗадачаОбъект);
	ЗадачаОбъект.Записать();
	УстановитьПоследнююВыполненнуюЗадачу(Задача);
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриВыполненииЗадачи;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	ПараметрыОповещения["Задача"] = Задача;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрутаБизнесПроцесса;
	
	Если Не ОбработчикОповещения = Неопределено Тогда
		Выполнить( ОбработчикОповещения + "(ПараметрыОповещения);");
	Иначе
		ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается в обработчике ВыборВарианта, точки Выбор варианта, имеющей варианты - Продолжить, Повторить, Завершить
//  Анализирует поле ДальнейшиеДействия задачи, по указанной точке маршрута
//
// Параметры:
//  ТочкаВыбораВарианта	 - ТочкаВыбораВарианта - точка выбора варианта 
//  БизнесПроцесс		 - БизнесПроцессСсылка, БизнесПпроцессОбъект - выполняемый бизнес-процесс 
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса 
// 
// Возвращаемое значение:
//   - Вариант - из точки выбора вариантов
//
Функция ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(ТочкаВыбораВарианта, БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Задача = ПолучитьИнформациюОПоследнейВыполненнойЗадаче(БизнесПроцесс.Ссылка, ТочкаМаршрута).Задача;
	
	Если Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Завершить Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Завершить;
	ИначеЕсли Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Продолжить Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Продолжить;
	ИначеЕсли Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Отменить Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Отменить;
	ИначеЕсли Задача.ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Повторить Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Повторить;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Вызывается в обработчике ВыборВарианта, точки Выбор варианта, имеющей варианты - Положительный, Отрицательный, Ошибка
//  Анализирует поле Результат, по указанной точке маршрута
//
// Параметры:
//  ТочкаВыбораВарианта	 - ТочкаВыбораВарианта - точка выбора варианта 
//  БизнесПроцесс		 - БизнесПроцессОбъект, БизнесПроцессСсылка - выполняемый бизнес-процесс 
//  ТочкаМаршрута		 - ТочкаМаршрутаБизнесПроцесса -точка маршрута бизнес-процесса 
// 
// Возвращаемое значение:
//   - Вариант - из точки выбора вариантов
//
Функция ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(ТочкаВыбораВарианта, БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Задача = ПолучитьИнформациюОПоследнейВыполненнойЗадаче(БизнесПроцесс.Ссылка, ТочкаМаршрута).Задача;
	
	Если Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Положительный;
	ИначеЕсли Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Отрицательный;
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.Ошибка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Получает информацию о последней выполненной задачее по указанной точке маршрута
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка, БинесПроцессОобъект - выполняемый бизнес-процесс 
//  ТочкаМаршрута	 - ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса 
// 
// Возвращаемое значение:
//   - Запись - информация о последней выполненной задаче по данному бизнес процессу в указанной точке маршрута
//
Функция ПолучитьИнформациюОПоследнейВыполненнойЗадаче(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПоследниеВыполненныеЗадачиАИТП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс.Ссылка);
	НаборЗаписей.Отбор.ТочкаМаршрута.Установить(ТочкаМаршрута);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НаборЗаписей[0];
	КонецЕсли;  
	
КонецФункции

// Получает ссылку на вложенный бизнес-процесс по точке мпршрута и ведущей задаче
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса	 - ТочкаМаршрутаБизнесПроцесса - точка маршрута бизнес-процесса 
//  Задача						 - Задача.ЗадачаАИТП - задача выполнения вложенного бизнес-процесса 
// 
// Возвращаемое значение:
//   - БизнесПроцессСсылка - ссылка на вложенный бизнес-процесс
//
Функция ПолучитьВложенныйБизнесПроцесс(ТочкаМаршрутаБизнесПроцесса, Задача) Экспорт

	ИмяБизнесПроцесса = СтрЗаменить(Строка(ТочкаМаршрутаБизнесПроцесса.ВложенныйПроцесс), "БизнесПроцессМенеджер.", "");
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйБизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ИмяБизнесПроцесса КАК ВложенныйБизнесПроцесс
	               |ГДЕ
	               |	ВложенныйБизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача";	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяБизнесПроцесса", ИмяБизнесПроцесса);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВедущаяЗадача", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли; 

КонецФункции // ПолучитьВложенныйБизнесПроцесс()

#КонецОбласти

#Область ОпределениеДействийБП

// Получает невыполненные задачи по точке маршрута и выполняет действия
//  Функционал действий определяется в соответствующих обработчиках:
// 
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцесса - точка маршрута, по которой выполняются действия								 - 	 - 
//  ОбработчикВыполнитьДействие - Строка - выполняется для каждой задачи
//  ОбработчикПередВыполнениемДействий - Строка - выполняется перед вызовом обработчиков ВыполнитьДействие
//  ОбработчикПослеВыполненияДействий - Строка - выполняется после вызова обработчиков ВыполнитьДействие
//  ОбработчикОшибкиПриВыполненииДействия - Строка - вызывается при возникновении исключения в процедуре ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПередВыполнениемДействий - Строка - вызывается при возникновении исключения в процедуре ОбработчикПередВыполнениемДействий
//  ОбработчикОшибкиПослеВыполненияДействий - Строка - вызывается при возникновении исключения в процедуре ОбработчикПослеВыполненияДействий
//  ОбработчикОповещенияПередВыполнениемДействий - Строка - вызывается после выполнения процедуры ОбработчикПередВыполнениемДействий
//  ОбработчикОповещенияПриВыполненииДействия - Строка - вызывается после выполнения процедуры ОбработчикВыполнитьДействие
//  ОбработчикОповещенияПослеВыполненияДействий - Строка - вызывается после выполнения процедуры ОбработчикПослеВыполненияДействий
//
Процедура ВыполнитьДействияПоТочкеМаршрута(
	ТочкаМаршрута
	, ОбработчикВыполнитьДействие
	, ОбработчикПередВыполнениемДействий = Неопределено
	, ОбработчикПослеВыполненияДействий = Неопределено
	, ОбработчикОшибкиПриВыполненииДействия = Неопределено
	, ОбработчикОшибкиПередВыполнениемДействий = Неопределено
	, ОбработчикОшибкиПослеВыполненияДействий = Неопределено
	, ОбработчикОповещенияПередВыполнениемДействий = Неопределено
	, ОбработчикОповещенияПриВыполненииДействия = Неопределено
	, ОбработчикОповещенияПослеВыполненияДействий = Неопределено
	) Экспорт
	
	ВыборкаЗадачи = ПолучитьВыборкуЗадачПоТочкеМаршрута(ТочкаМаршрута);
	
	Если ВыборкаЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Соответствие;
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПередВыполнениемДействия;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрута;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	
	ПараметрыВыполнения.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	ВыполнятьЗадачи = Истина;
	
	Если Не ОбработчикПередВыполнениемДействий = Неопределено Тогда
		
		Попытка
			Выполнить( ОбработчикПередВыполнениемДействий + "(ТочкаМаршрута, ПараметрыВыполнения);");
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ошибка = ОбработкаОшибокАИТП.НовыйОшибкаВыполнения(Ошибка).Ссылка;
			
			ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Ошибка;
			ПараметрыОповещения.Вставить("Ошибка", Ошибка);
			ВыполнятьЗадачи = Ложь;
			ПометитьЗадачиКакСОшибкой(ВыборкаЗадачи, Ошибка);
			
			Если Не ОбработчикОшибкиПередВыполнениемДействий = Неопределено Тогда
				
				Выполнить( ОбработчикОшибкиПередВыполнениемДействий + "(ТочкаМаршрута, ВыборкаЗадачи, Ошибка);" );
				
			Иначе
				
				ОбработкаОшибокАИТП.ОбработатьОшибкуПередВыполнениемДействий(ТочкаМаршрута, Ошибка);
				
			КонецЕсли;
			
			ВыполнитьЗадачи(ВыборкаЗадачи);
			
		КонецПопытки;
		
		Если Не ОбработчикОповещенияПередВыполнениемДействий = Неопределено Тогда
			Выполнить( ОбработчикОповещенияПередВыполнениемДействий + "(ПараметрыОповещения);");
		Иначе
			ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗадачи = Истина Тогда
		
		Пока ВыборкаЗадачи.Следующий() Цикл
			
			Задача = ВыборкаЗадачи.Ссылка.ПолучитьОбъект();
			
			ПараметрыВыполнения.Вставить("Задача", Задача);
			
			ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
			ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриВыполненииДействия;
			ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрута;
			ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
			ПараметрыОповещения["Задача"] = Задача.Ссылка;
			ПараметрыОповещения["БизнесПроцесс"] = Задача.БизнесПроцесс;

			ПараметрыВыполнения.Вставить("ПараметрыОповещения", ПараметрыОповещения);
			ОбработатьОшибку = Ложь;
			
			Попытка
				
				Выполнить (ОбработчикВыполнитьДействие + "(ТочкаМаршрута, Задача, ПараметрыВыполнения);");
				
			Исключение
				
				Ошибка = ИнформацияОбОшибке();
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ошибка = ОбработкаОшибокАИТП.НовыйОшибкаВыполнения(Ошибка).Ссылка;
				
				ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Ошибка;
				ПараметрыОповещения.Вставить("ИнформацияОбОшибке", Ошибка);
				Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Ошибка;
				Задача.Ошибка = Ошибка;
				Задача.Записать();
				ОбработатьОшибку = Истина;
				
			КонецПопытки;
			
			Если ОбработатьОшибку = Истина Тогда
				
				Если Не ОбработчикОшибкиПриВыполненииДействия = Неопределено Тогда
					
					Выполнить( ОбработчикОшибкиПриВыполненииДействия + "(ТочкаМаршрута, Задача, Ошибка);" );
					
				Иначе
					
					ОбработкаОшибокАИТП.ОбработатьОшибкуПриВыполненииДействия(ТочкаМаршрута, Задача, Ошибка);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Задача.ВыполнитьЗадачу();
			
			Если Не ОбработчикОповещенияПриВыполненииДействия = Неопределено Тогда
				Выполнить( ОбработчикОповещенияПриВыполненииДействия + "(ПараметрыОповещения);");
			Иначе
				ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПослеВыполненияДействия;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрута;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	
	ПараметрыВыполнения.Вставить("ПараметрыОповещения", ПараметрыОповещения);

	Если Не ОбработчикПослеВыполненияДействий = Неопределено Тогда
		
		Попытка
			
			Выполнить(ОбработчикПослеВыполненияДействий + "(ТочкаМаршрута, ПараметрыВыполнения);");
			
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;

			Ошибка = ОбработкаОшибокАИТП.НовыйОшибкаВыполнения(Ошибка).Ссылка;
			
			ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Ошибка;
			ПараметрыОповещения.Вставить("ИнформацияОбОшибке", Ошибка);
			
			Если Не ОбработчикОшибкиПослеВыполненияДействий = Неопределено Тогда
				
				Выполнить( ОбработчикОшибкиПослеВыполненияДействий + "(ТочкаМаршрута, Ошибка);" );
				
			Иначе
				
				ОбработкаОшибокАИТП.ОбработатьОшибкуПослеВыполненияДействий(ТочкаМаршрута, Ошибка);
				
			КонецЕсли;
			
		КонецПопытки;
		
		Если Не ОбработчикОповещенияПослеВыполненияДействий = Неопределено Тогда
			Выполнить( ОбработчикОповещенияПослеВыполненияДействий + "(ПараметрыОповещения);");
		Иначе
			ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действие по определенной задаче, используется для папаллельного выполнения действий
//  Функционал действия определяется в соответствующих обработчиках:
//  
// Параметры:
//  ЗадачаСсылка - Задача.ЗадачаАИТП - задача, по которой выполняется действие								 - 	 - 
//  ОбработчикВыполнитьДействие - Строка - выполняет действие по задаче
//  ОбработчикПередВыполнениемДействия - Строка - вызывается перед ОбработчикВыполнитьДействие
//  ОбработчикПослеВыполненияДействия - Строка - вызывается после ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПриВыполненииДействия - Строка - вызывается при возникновении исключения в ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПередВыполнениемДействия - Строка - вызывается при возникновении исключения в ОбработчикПередВыполнениемДействия
//  ОбработчикОшибкиПослеВыполненияДействия - Строка - вызывается при возникновении исключения в ОбработчикПослеВыполненияДействия
//  ОбработчикОповещенияПередВыполнениемДействия - Строка - вызывается после выполнения ОбработчикВыполнитьДействие
//  ОбработчикОповещенияПриВыполненииДействия - Строка - вызывается после выполнения ОбработчикПередВыполнениемДействия
//  ОбработчикОповещенияПослеВыполненияДействия - Строка - вызывается после выполнения ОбработчикПослеВыполненияДействия
//
Процедура ВыполнитьДействиеПоЗадаче(
	ЗадачаСсылка
	, ОбработчикВыполнитьДействие
	, ОбработчикОшибкиПриВыполненииДействия = Неопределено
	, ОбработчикОповещенияПриВыполненииДействия = Неопределено
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТочкаМаршрута = ЗадачаСсылка.ТочкаМаршрута;
	ПараметрыВыполнения = Новый Соответствие;
	
	// Это костыль, ожидающий, когда БП отпустит задачу.
	// Если не делать цикл - ссылка есть, а объект получить не можем
	// Должно быть просто Задача = ЗадачаСсылка.ПолучитьОбъект();
	// Поскольку фоновое задание вызывается в функции ПриСозданииЗадачи
	// по всей видимости эта транзакция завершается позже, чем стартует РЗ
	// и не дает получить объект
	//
	Задача = Неопределено;
	ДатаОкончанияОжидания = ТекущаяДата() + 10;
	
	Пока Задача = Неопределено И ТекущаяДата() < ДатаОкончанияОжидания Цикл
		Задача = ЗадачаСсылка.ПолучитьОбъект();
	КонецЦикла;
	// КонецКостыля
	
	ПараметрыВыполнения.Вставить("Задача", Задача);
	
	ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
	ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриВыполненииДействия;
	ПараметрыОповещения["ТочкаМаршрута"] = ТочкаМаршрута;
	ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
	ПараметрыОповещения["Задача"] = ЗадачаСсылка;
	ПараметрыОповещения["БизнесПроцесс"] = ЗадачаСсылка.БизнесПроцесс;

	ПараметрыВыполнения.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	ОбработатьОшибку = Ложь;
	
	Попытка
		
		Выполнить (ОбработчикВыполнитьДействие + "(ТочкаМаршрута, Задача, ПараметрыВыполнения);");
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

		Ошибка = ОбработкаОшибокАИТП.НовыйОшибкаВыполнения(Ошибка).Ссылка;
		
		ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Ошибка;
		ПараметрыОповещения.Вставить("ИнформацияОбОшибке", Ошибка);
		Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Ошибка;
		Задача.Ошибка = Ошибка;
		Задача.Записать();
		ОбработатьОшибку = Истина;
		
	КонецПопытки;
	
	Если ОбработатьОшибку = Истина Тогда
		
		Если Не ОбработчикОшибкиПриВыполненииДействия = Неопределено Тогда
			
			Выполнить( ОбработчикОшибкиПриВыполненииДействия + "(ТочкаМаршрута, Задача, Ошибка);" );
			
		Иначе
			
			ОбработкаОшибокАИТП.ОбработатьОшибкуПриВыполненииДействия(Задача.ТочкаМаршрута, Задача, Ошибка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Задача.ВыполнитьЗадачу();
	
	Если Не ОбработчикОповещенияПриВыполненииДействия = Неопределено Тогда
		Выполнить( ОбработчикОповещенияПриВыполненииДействия + "(ПараметрыОповещения);");
	Иначе
		ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры


// Выполняет действие по определенной задаче в отдельном фоновом задании, используется для папаллельного выполнения действий
//  Функционал действия определяется в соответствующих обработчиках:
//  
// Параметры:
//  ЗадачаСсылка - Задача.ЗадачаАИТП - задача, по которой выполняется действие								 - 	 - 
//  ОбработчикВыполнитьДействие - Строка - выполняет действие по задаче
//  ОбработчикПередВыполнениемДействия - Строка - вызывается перед ОбработчикВыполнитьДействие
//  ОбработчикПослеВыполненияДействия - Строка - вызывается после ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПриВыполненииДействия - Строка - вызывается при возникновении исключения в ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПередВыполнениемДействия - Строка - вызывается при возникновении исключения в ОбработчикПередВыполнениемДействия
//  ОбработчикОшибкиПослеВыполненияДействия - Строка - вызывается при возникновении исключения в ОбработчикПослеВыполненияДействия
//  ОбработчикОповещенияПередВыполнениемДействия - Строка - вызывается после выполнения ОбработчикВыполнитьДействие
//  ОбработчикОповещенияПриВыполненииДействия - Строка - вызывается после выполнения ОбработчикПередВыполнениемДействия
//  ОбработчикОповещенияПослеВыполненияДействия - Строка - вызывается после выполнения ОбработчикПослеВыполненияДействия
//
Процедура ВыполнитьДействиеПоЗадачеАсинхронно(
	ЗадачаСсылка
	, ОбработчикВыполнитьДействие
	, ОбработчикОшибкиПриВыполненииДействия = Неопределено
	, ОбработчикОповещенияПриВыполненииДействия = Неопределено
	) Экспорт
	
	УникальныйИдентификаторЗадачи = ЗадачаСсылка.УникальныйИдентификатор();

	МенеджерЗаписи = РегистрыСведений.АсинхронныеЗадачиАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = ЗадачаСсылка;
	МенеджерЗаписи.Дата = ТекущаяДата();
	
	МассивПараметров = Новый Массив;

	МассивПараметров.Добавить(УникальныйИдентификаторЗадачи);
	МассивПараметров.Добавить(ОбработчикВыполнитьДействие);
	МассивПараметров.Добавить(ОбработчикОшибкиПриВыполненииДействия);
	МассивПараметров.Добавить(ОбработчикОповещенияПриВыполненииДействия);
	
	Попытка
		ФоновыеЗадания.Выполнить("БизнесПроцессыАИТП.ОбработчикВыполнитьДействиеПоЗадачеАсинхронно", МассивПараметров, Строка(УникальныйИдентификаторЗадачи), Строка(ЗадачаСсылка));
	Исключение
	КонецПопытки;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЭкземпляровБП

// Регистрирует бизнес-процесс в очереди для выполнения
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцесссОбъект - бизнес-процесс, помещаемый в очередь для выполнения 
//  ЗависитОт		 - Массив - зависимости, от которых зависит очередь выполнения бизнес-процесса 
//  ВлияетНа		 - Массив - зависимости, на которые влияет бизнес-процесс
//
Процедура ЗарегистрироватьДляВыполнения(БизнесПроцесс, ЗависитОт = Неопределено, ВлияетНа = Неопределено) Экспорт
	
	Док = Документы.РегистрацияПроцессаДляВыполненияАИТП.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.БизнесПроцесс = БизнесПроцесс.Ссылка;
	
	Если НЕ ЗависитОт = Неопределено Тогда
		
		Для Каждого ЭлементЗависитОт Из ЗависитОт Цикл
			
			ИдентификаторЗависитОт = Док.ЗависитОт.Добавить();
			ИдентификаторЗависитОт.Имя = ЭлементЗависитОт.Имя;
			ИдентификаторЗависитОт.Значение = Строка(ЭлементЗависитОт.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ВлияетНа = Неопределено Тогда
		
		Для Каждого ЭлементВлияетНа Из ВлияетНа Цикл
			
			ИдентификаторВлияетНа = Док.ВлияетНа.Добавить();
			ИдентификаторВлияетНа.Имя = ЭлементВлияетНа.Имя;
			ИдентификаторВлияетНа.Значение = Строка(ЭлементВлияетНа.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеРеквизитыПроцессовАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс.Ссылка;
	МенеджерЗаписи.Автор = ПараметрыСеанса.ТекущийПользовательАИТП;
	МенеджерЗаписи.Записать(Истина);

	Док.Записать(РежимЗаписиДокумента.Запись);
	
	Попытка
		СтартоватьПроцессыАсинхронно();	
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Создает новый элемент зависимости для бизнес-процесса
//
// Параметры:
//  Имя		 - Строка - имя зависимости 
//  Значение - Произвольный - значение зависимости 
// 
// Возвращаемое значение:
//   -  Структура - экземпляр элемента зависимости
//
Функция НовыйЭлементЗависимости(Имя , Значение) Экспорт
	
	Элемент = Новый Структура;
	Элемент.Вставить("Имя", Имя);
	Элемент.Вставить("Значение", Значение);
	
	Возврат Элемент;
	
КонецФункции

// Создает элемент зависимости с именем Имя и значением Значение в массивы зависимостей
//  в соответствии с выполняемыми операциями I - создание, U - изменение, D - удаление, P - установка изменение ссылки
//
// Параметры:
//  ТекущиеОперации	 -  Массив - операции, от которых зависит очередь выполнения бизнес-процесса
//  ВлияетНаОперации - 	Массив - операции, на которые влияет бизнес-процесс 
//  ТипыОпераций	 - 	Строка - типы операций бизнес-процесса 
//  Значение		 - 	Произвольный - значение элемента зависимости 
//  Имя				 - 	Строка - имя элемента зависимости 
//
Процедура ДобавитьЭлементЗависимости(ТекущиеОперации, ВлияетНаОперации, ТипыОпераций, Значение, Имя = Неопределено) Экспорт
	
	Если Не Имя = Неопределено Тогда
		ИмяЗависимости = Имя;
	Иначе
		ИмяЗависимости = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
	КонецЕсли;
	
	ЗначениеЗависимости = ЗначениеВСтроку(Значение);
	
	Если Найти(ВРег(ТипыОпераций), "I") > 0 Тогда
		
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("U" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("P" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("D" + ИмяЗависимости, ЗначениеЗависимости)
			);
			
	КонецЕсли;
	
	Если Найти(ВРег(ТипыОпераций), "U") > 0 Тогда
		
		ТекущиеОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("U" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("U" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("P" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("D" + ИмяЗависимости, ЗначениеЗависимости)
			);
			
	КонецЕсли;
		
	Если Найти(ВРег(ТипыОпераций), "P") > 0 Тогда	
		
		ТекущиеОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("P" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("U" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("D" + ИмяЗависимости, ЗначениеЗависимости)
			);
		
	КонецЕсли;		
	
	Если Найти(ВРег(ТипыОпераций), "D") > 0 Тогда
		
		ТекущиеОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("D" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("U" + ИмяЗависимости, ЗначениеЗависимости)
			);
		ВлияетНаОперации.Добавить(
			БизнесПроцессыАИТП.НовыйЭлементЗависимости("P" + ИмяЗависимости, ЗначениеЗависимости)
			);
			
	КонецЕсли;
	
КонецПроцедуры

// Преобразует значение в строку
//  Используется для преобразования значений зависимостей в строковый вид
//
// Параметры:
//  Значение - Произвольный - значение зависимости 
// 
// Возвращаемое значение:
//   - Строка - строковое представление значения зависимости
//
Функция ЗначениеВСтроку(Значение) Экспорт
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧГ=0");
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		СтрокаДата = Формат(Значение, "ДФ=""ггггММддЧЧммсс""");
		
		Если СтрокаДата = "" Тогда
			Возврат "000101010000";
		Иначе
			Возврат СтрокаДата;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗначения = Тип("ДвоичныеДанные") Тогда
		Возврат Base64Строка(Значение);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Возврат Строка(Значение);
	Иначе
		
		МетаданныеТип = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если МетаданныеТип = Неопределено Тогда
			Возврат Строка(Значение);
		КонецЕсли;
		
		Если Найти(МетаданныеТип.ПолноеИмя(), "Перечисление") = 1 Тогда
			Возврат Строка(Значение);
		Иначе
			Возврат Строка(Значение.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Возвращаеит имя элемента метаданных по ссылке
//
// Параметры:
//  Значение - Произвольный - значение объекта метаданных 
// 
// Возвращаемое значение:
//   - Строка - полное имя объекта метаданных, соответствующее объекту
//
Функция ПолучитьИмя(Значение) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныеУправлениеБП

// Стартует бизнес-процессы в очереди с учетом зависимостей
//
Процедура СтартоватьПроцессы() Экспорт
	// Вставить содержимое обработчика.
	Если Не Константы.РазрешитьЗапускПроцессовАИТП.Получить() = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРегистрациюДляВыполненныхБП();
	
	ЗапросБПДляВыполнения = Новый Запрос("ВЫБРАТЬ
	                                     |	РегистрацияПроцессаДляВыполненияАИТП.Ссылка КАК Ссылка
	                                     |ИЗ
	                                     |	Документ.РегистрацияПроцессаДляВыполненияАИТП КАК РегистрацияПроцессаДляВыполненияАИТП
	                                     |ГДЕ
	                                     |	РегистрацияПроцессаДляВыполненияАИТП.БизнесПроцесс.Завершен = &Завершен
	                                     |	И РегистрацияПроцессаДляВыполненияАИТП.БизнесПроцесс.Стартован = &Стартован
	                                     |
	                                     |УПОРЯДОЧИТЬ ПО
	                                     |	РегистрацияПроцессаДляВыполненияАИТП.Номер");
										 
    ЗапросБПДляВыполнения.УстановитьПараметр("Завершен", Ложь);
	ЗапросБПДляВыполнения.УстановитьПараметр("Стартован", Ложь);
										 
	ВыборкаБПДляВыполнения = ЗапросБПДляВыполнения.Выполнить().Выбрать();
	
	Пока ВыборкаБПДляВыполнения.Следующий() Цикл
		
		ЗапросМожноСтартоватьБП = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                                       |	РегистрацияПроцессаДляВыполненияАИТПЗависитОт.Ссылка
		                                       |ИЗ
		                                       |	Документ.РегистрацияПроцессаДляВыполненияАИТП.ЗависитОт КАК РегистрацияПроцессаДляВыполненияАИТПЗависитОт
		                                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПроцессаДляВыполненияАИТП.ВлияетНа КАК РегистрацияПроцессаДляВыполненияАИТПВлияетНа
		                                       |		ПО РегистрацияПроцессаДляВыполненияАИТПЗависитОт.Значение = РегистрацияПроцессаДляВыполненияАИТПВлияетНа.Значение
		                                       |			И РегистрацияПроцессаДляВыполненияАИТПЗависитОт.Имя = РегистрацияПроцессаДляВыполненияАИТПВлияетНа.Имя
		                                       |ГДЕ
		                                       |	РегистрацияПроцессаДляВыполненияАИТПЗависитОт.Ссылка.Номер = &Номер
		                                       |	И РегистрацияПроцессаДляВыполненияАИТПВлияетНа.Ссылка.Номер < &Номер");
											   
		ЗапросМожноСтартоватьБП.УстановитьПараметр("Номер", ВыборкаБПДляВыполнения.Ссылка.Номер);
		
		Если ЗапросМожноСтартоватьБП.Выполнить().Пустой() Тогда
			
			Параметры = Новый Массив;
			Параметры.Добавить(ВыборкаБПДляВыполнения.Ссылка);
	
			ФЗ = ФоновыеЗадания.Выполнить("БизнесПроцессыАИТП.СтартоватьБизнесПроцесс" , 
				Параметры, Строка(ВыборкаБПДляВыполнения.Ссылка.УникальныйИдентификатор()), "Стартовать бизнес-процесс по регистрации " + ВыборкаБПДляВыполнения.Ссылка.Номер);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Стартует регламентное задание старта процессов
//
Процедура ОбработчикСтартоватьПроцессыАсинхронно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗадания.НайтиПредопределенное("СтартоватьПроцессыАИТП");
	
	Попытка
		Задание.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Стартует регламентное задание старта процессов в отдельном фоновом задании
//
Процедура СтартоватьПроцессыАсинхронно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ФоновыеЗадания.Выполнить("БизнесПроцессыАИТП.ОбработчикСтартоватьПроцессыАсинхронно");
	
КонецПроцедуры

// Стартует бизнес-процесс по регистрации в очереди процессов
//
Процедура СтартоватьБизнесПроцесс(РегистрацияБП) Экспорт
	
	БизнесПроцесс = РегистрацияБП.Ссылка.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцесс.Старт();
	
КонецПроцедуры

// Удаляет выполненные процессы из очереди
//
Процедура УдалитьРегистрациюДляВыполненныхБП() Экспорт
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегистрацияПроцессаДляВыполненияАИТП.Ссылка КАК Ссылка
						  |ИЗ
						  |	Документ.РегистрацияПроцессаДляВыполненияАИТП КАК РегистрацияПроцессаДляВыполненияАИТП
						  |ГДЕ
						  |	РегистрацияПроцессаДляВыполненияАИТП.БизнесПроцесс.Завершен = &Завершен");
												
	Запрос.УстановитьПараметр("Завершен", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет процесс из очереди 
//
Процедура УдалитьРегистрациюБПДляВыполнения(БизнесПроцесс)

	РегистрацияБП = Документы.РегистрацияПроцессаДляВыполненияАИТП.НайтиПоРеквизиту("БизнесПроцесс", БизнесПроцесс);
	
	Если Не РегистрацияБП = Документы.РегистрацияПроцессаДляВыполненияАИТП.ПустаяСсылка() Тогда
	
		РегистрацияБП.ПолучитьОбъект().Удалить();
	
	КонецЕсли; 

КонецПроцедуры // УдалитьРегистрациюБПДляВыполнения()
 
#КонецОбласти

#Область СлужебныеУправлениеЗадачами

// Запоминает информацию о последней выполненной задаче по точке маршрута
//
Процедура УстановитьПоследнююВыполненнуюЗадачу(Задача) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПоследниеВыполненныеЗадачиАИТП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Задача.БизнесПроцесс);
	НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Задача.ТочкаМаршрута);
	НаборЗаписей.Прочитать();
	КоличествоВыполнений = 0;
	
	Если Не НаборЗаписей.Количество() = 0 Тогда
		КоличествоВыполнений = НаборЗаписей[0].КоличествоВыполнений;
	КонецЕсли;  
	
	НаборЗаписей.Очистить();
	
	ВыполненнаяЗадача = НаборЗаписей.Добавить();
	ВыполненнаяЗадача.БизнесПроцесс = Задача.БизнесПроцесс;
	ВыполненнаяЗадача.ТочкаМаршрута = Задача.ТочкаМаршрута;
	ВыполненнаяЗадача.Задача = Задача;
	ВыполненнаяЗадача.КоличествоВыполнений = КоличествоВыполнений + 1;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполняет реквизиты по умолчанию для задачи, при ее выполнении
//
Процедура ЗаполнитьРеквизитыПриВыполненииЗадачи(Задача) Экспорт
	
	Задача.ДатаВыполнения = ТекущаяДата();
	Задача.Исполнитель = ПараметрыСеанса.ТекущийПользовательАИТП;
	
	Если Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.ПустаяСсылка() Тогда
		Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Положительный;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет задачи вида ОжидающиеВыполнения
// Задачи этого типа используются для приостановки выполнения БП до определенного времени
//
Процедура ВыполнитьОжидающиеВыполненияЗадачиИТП() Экспорт
	// Вставить содержимое обработчика.
  	ОжидающиеЗадачиЗапрос = Новый Запрос();
	ОжидающиеЗадачиЗапрос.Текст = "ВЫБРАТЬ
	                              |	ЗадачаАИТП.Ссылка КАК Ссылка
	                              |ИЗ
	                              |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                              |ГДЕ
	                              |	ЗадачаАИТП.Выполнена = ЛОЖЬ
	                              |	И ЗадачаАИТП.ВидЗадачи = &ВидЗадачи
	                              |	И ЗадачаАИТП.ДатаВыполнения <= &Дата
	                              |	И ЗадачаАИТП.ПометкаУдаления = ЛОЖЬ";
									
	ОжидающиеЗадачиЗапрос.УстановитьПараметр("ВидЗадачи", Перечисления.ВидыЗадачАИТП.Ожидание);
	ОжидающиеЗадачиЗапрос.УстановитьПараметр("Дата", ТекущаяДата());
	ВыборкаЗадачи = ОжидающиеЗадачиЗапрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Пока ВыборкаЗадачи.Следующий() Цикл
			
			ПараметрыОповещения = ОповещениеПользователейАИТП.НовыйПараметрыОповещения();
			ПараметрыОповещения["МоментСоздания"] = Перечисления.МоментыСозданияОповещенияАИТП.ПриВыполненииДействия;
			ПараметрыОповещения["ТочкаМаршрута"] = ВыборкаЗадачи.Ссылка.ТочкаМаршрута;
			ПараметрыОповещения["ВидОповещения"] = Перечисления.ВидыОповещенийАИТП.Информация;
			
			ОжидающаяЗадача = ВыборкаЗадачи.Ссылка.ПолучитьОбъект();
			ОжидающаяЗадача.ВыполнитьЗадачу();
			
			ОповещениеПользователейАИТП.ОповеститьПользователей(ПараметрыОповещения);
			
		КонецЦикла;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(Ошибка);
		
	КонецПопытки;

КонецПроцедуры

// Получает выборку, содержащую невыполненные задачи по точке маршрута
//
Функция ПолучитьВыборкуЗадачПоТочкеМаршрута(ТочкаМаршрута) Экспорт
	// Вставить содержимое обработчика.
  	ЗадачиЗапрос = Новый Запрос();
	ЗадачиЗапрос.Текст = "ВЫБРАТЬ
	                     |	ЗадачаАИТП.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                     |ГДЕ
	                     |	ЗадачаАИТП.Выполнена = ЛОЖЬ
	                     |	И ЗадачаАИТП.ПометкаУдаления = ЛОЖЬ
	                     |	И ЗадачаАИТП.ТочкаМаршрута = &ТочкаМаршрута";
									
	ЗадачиЗапрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Возврат ЗадачиЗапрос.Выполнить().Выбрать();

КонецФункции

// Помечает выборку задач как выполненные с ошибкой
//
Процедура ПометитьЗадачиКакСОшибкой(ВыборкаЗадачи, Ошибка)
	
	ВыборкаЗадачи.Сбросить();
	
	Пока ВыборкаЗадачи.Следующий() Цикл
	
		Задача = ВыборкаЗадачи.Ссылка.ПолучитьОбъект();
		Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Ошибка;
		Задача.Ошибка = Ошибка;
		Задача.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

// Помечает выборку задач как выполненные
//
Процедура ВыполнитьЗадачи(ВыборкаЗадачи)
	
	ВыборкаЗадачи.Сбросить();
	
	Пока ВыборкаЗадачи.Следующий() Цикл
	
		Задача = ВыборкаЗадачи.Ссылка.ПолучитьОбъект();
		Задача.ВыполнитьЗадачу();
	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик выполнения действия по определенной задаче в отдельном фоновом задании, используется для папаллельного выполнения действий
//  Функционал действия определяется в соответствующих обработчиках:
//  
// Параметры:
//  ЗадачаСсылка - Задача.ЗадачаАИТП - задача, по которой выполняется действие								 - 	 - 
//  ОбработчикВыполнитьДействие - Строка - выполняет действие по задаче
//  ОбработчикПередВыполнениемДействия - Строка - вызывается перед ОбработчикВыполнитьДействие
//  ОбработчикПослеВыполненияДействия - Строка - вызывается после ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПриВыполненииДействия - Строка - вызывается при возникновении исключения в ОбработчикВыполнитьДействие
//  ОбработчикОшибкиПередВыполнениемДействия - Строка - вызывается при возникновении исключения в ОбработчикПередВыполнениемДействия
//  ОбработчикОшибкиПослеВыполненияДействия - Строка - вызывается при возникновении исключения в ОбработчикПослеВыполненияДействия
//  ОбработчикОповещенияПередВыполнениемДействия - Строка - вызывается после выполнения ОбработчикВыполнитьДействие
//  ОбработчикОповещенияПриВыполненииДействия - Строка - вызывается после выполнения ОбработчикПередВыполнениемДействия
//  ОбработчикОповещенияПослеВыполненияДействия - Строка - вызывается после выполнения ОбработчикПослеВыполненияДействия
//
Процедура ОбработчикВыполнитьДействиеПоЗадачеАсинхронно(
	УникальныйИдентификаторЗадачи
	, ОбработчикВыполнитьДействие
	, ОбработчикОшибкиПриВыполненииДействия = Неопределено
	, ОбработчикОповещенияПриВыполненииДействия = Неопределено
	) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ЗадачаСсылка = Задачи.ЗадачаАИТП.ПолучитьСсылку(УникальныйИдентификаторЗадачи);
	
	ВыполнитьДействиеПоЗадаче(
	ЗадачаСсылка
	, ОбработчикВыполнитьДействие
	, ОбработчикОшибкиПриВыполненииДействия
	, ОбработчикОповещенияПриВыполненииДействия
	);	
	
	МенеджерЗаписи = РегистрыСведений.АсинхронныеЗадачиАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = ЗадачаСсылка;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Помечает асинхронные задачи, не запущенные в течении определенного интервала, как выполненные с ошибкой 
//
Процедура ПометитьНезапущенныеАсинхронныеЗадачиКакЗавершенныеСОшибкой() Экспорт
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АсинхронныеЗадачиАИТП.Задача КАК Задача
	                      |ИЗ
	                      |	РегистрСведений.АсинхронныеЗадачиАИТП КАК АсинхронныеЗадачиАИТП");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", Строка(Выборка.Задача.УникальныйИдентификатор()));
		МассивЗаданий =	ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если МассивЗаданий.Количество() = 0 
			Или Не МассивЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			
			МенеджерЗаписи = РегистрыСведений.АсинхронныеЗадачиАИТП.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Задача = Выборка.Задача;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				Если Не Выборка.Задача.Выполнена Тогда
					
					Задача = Выборка.Задача.ПолучитьОбъект();
					Задача.Результат = Перечисления.РезультатыВыполненияДействияАИТП.Ошибка;
					Ошибка = Документы.ОшибкиВыполненияАИТП.СоздатьДокумент();
					Ошибка.Дата = ТекущаяДата();
					Ошибка.Описание = "Фоновое задание по задаче не было корректно завершено.";
					
					Если Не МассивЗаданий.Количество() = 0 И Не МассивЗаданий[0].ИнформацияОбОшибке = Неопределено Тогда
						
						Инфо = МассивЗаданий[0].ИнформацияОбОшибке;
						Ошибка.Описание = Ошибка.Описание + Символы.ВК + Символы.ПС;
						Ошибка.Описание = Ошибка.Описание + "Описание: " + Инфо.Описание + Символы.ВК + Символы.ПС;
						Ошибка.Описание = Ошибка.Описание + "ИмяМодуля: " + Инфо.ИмяМодуля + Символы.ВК + Символы.ПС;
						Ошибка.Описание = Ошибка.Описание + "НомерСтроки: " + Инфо.НомерСтроки + Символы.ВК + Символы.ПС;
						Ошибка.Описание = Ошибка.Описание + "ИсходнаяСтрока: " + Инфо.ИсходнаяСтрока + Символы.ВК + Символы.ПС;
						
					КонецЕсли;
					
					Ошибка.Записать(РежимЗаписиДокумента.Запись);
					Задача.Ошибка = Ошибка.Ссылка;
					Задача.Записать();
					Задача.ВыполнитьЗадачу();
					
				КонецЕсли;
				
				МенеджерЗаписи.Удалить();
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Стартует регламентное задание в отдельном фоновом задании
//
// Параметры:
//  ИмяЗадания	 - Строка	 - имя предопределенного регламентного задания
//
Процедура СтартоватьРегламентноеЗаданиеАсинхронно(ИмяЗадания) 
	
	Параметры = Новый Массив;
	Параметры.Добавить(ИмяЗадания);
	ФоновыеЗадания.Выполнить("БизнесПроцессыАИТП.СтартоватьРегламентноеЗадание", Параметры);	
	
КонецПроцедуры

// Производит отложенный старт регламентного задания
//
// Параметры:
//  ИмяЗадания	 - Строка	 - имя предопределенного регламентного задания 
//
Процедура СтартоватьРегламентноеЗадание(ИмяЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РЗ = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	РЗ.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеСтарыхБП

Процедура УдалитьСтарыеИТП() Экспорт
	// Вставить содержимое обработчика.
	Если Не Константы.РазрешитьУдалениеСтарыхПроцессовАИТП.Получить() = Истина Тогда
		Возврат;
	КонецЕсли;
	
	КонецПериодаУдаления = ТекущаяДата() - 3600*Константы.ИнтервалХраненияПроцессовАИТП.Получить();
	ВедущаяЗадача = Задачи.ЗадачаАИТП.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗадачаАИТП.БизнесПроцесс КАК БизнесПроцесс
	                      |ИЗ
	                      |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                      |ГДЕ
	                      |	ЗадачаАИТП.БизнесПроцесс.Завершен = ИСТИНА
	                      |	И ЗадачаАИТП.БизнесПроцесс.Стартован = ИСТИНА
	                      |	И ЗадачаАИТП.БизнесПроцесс.Дата < &Дата
	                      |	И (ЗадачаАИТП.БизнесПроцесс.ВедущаяЗадача.Ссылка ЕСТЬ NULL
						  | Или ЗадачаАИТП.БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача)");
	
	Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
	Запрос.УстановитьПараметр("Дата", КонецПериодаУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УдалитьЗадачи(Выборка.БизнесПроцесс);
		Выборка.БизнесПроцесс.ПолучитьОбъект().Удалить();
	
	КонецЦикла;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьЗадачи(БизнесПроцесс)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                            |	ЗадачаАИТП.Ссылка КАК Ссылка
	                            |ИЗ
	                            |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                            |ГДЕ
	                            |	ЗадачаАИТП.БизнесПроцесс = &БизнесПроцесс");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УдалитьБП(Выборка.Ссылка);
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	
	КонецЦикла; 
	

КонецПроцедуры // УдалитьЗадачи()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьБП(ВедущаяЗадача)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗадачаАИТП.БизнесПроцесс КАК БизнесПроцесс
	                      |ИЗ
	                      |	Задача.ЗадачаАИТП КАК ЗадачаАИТП
	                      |ГДЕ
	                      |	ЗадачаАИТП.БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача");
	
	Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УдалитьЗадачи(Выборка.БизнесПроцесс);
		Выборка.БизнесПроцесс.ПолучитьОбъект().Удалить();
	
	КонецЦикла; 

КонецПроцедуры // УдалитьБП()

#КонецОбласти

#КонецОбласти