#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьСообщениеПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура ОтправитьСообщениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0], Перечисления.ВидыЗадачАИТП.Действие, "ОтправитьСообщенияПоЭлектроннойПочтеАИТП");
	
КонецПроцедуры

Процедура ПроверитьРезультатВыполненияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ОтправитьСообщениеПоЭлектроннойПочтеАИТП.ТочкиМаршрута.ОтправитьСообщение
	);
	
КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиСообщенияПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСОшибкой = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(ЭтотОбъект.Ссылка, БизнесПроцессы.ОтправитьСообщениеПоЭлектроннойПочтеАИТП.ТочкиМаршрута.ОтправитьСообщение);
	ФормируемыеЗадачи[0].ОшибкаДляОбработки = ЗадачаСОшибкой.Задача.Ошибка;
	

	БизнесПроцессыАИТП.ПриСозданииЗадачи(
	    ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.ОбработкаОшибки
	);
	
	
КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиСообщенияПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура ПроверитьРезультатОбработкиОшибкиОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ОтправитьСообщениеПоЭлектроннойПочтеАИТП.ТочкиМаршрута.ОбработатьОшибкуОтправкиСообщения
	);
	
КонецПроцедуры

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(ТочкаМаршрутаБизнесПроцесса, ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
		, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		);
	
КонецПроцедуры

Процедура ПодождатьПовторногоВыполненияПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ФормируемыеЗадачи[0].Дата = ТекущаяДата() + ЭтотОбъект.ИнтервалМеждуПопытками;
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0], Перечисления.ВидыЗадачАИТП.Ожидание);
	
КонецПроцедуры

Процедура ПодождатьПовторногоВыполненияПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура КоличествоПовторенийМеньшеДопустимогоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
	ПоследняяЗадача = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект,
		БизнесПроцессы.ОтправитьСообщениеПоЭлектроннойПочтеАИТП.ТочкиМаршрута.ОтправитьСообщение
	);
	
	Если ПоследняяЗадача.КоличествоВыполнений < ЭтотОбъект.КоличествоПопыток Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		);
		
КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Ошибка
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		);

КонецПроцедуры

#КонецОбласти