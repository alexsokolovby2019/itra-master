#Область СлужебныеПроцедурыИФункции

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(
			ТочкаМаршрутаБизнесПроцесса,
			ЭтотОбъект
		);
		
КонецПроцедуры

Процедура СоздатьПользователяИнформационнойБазыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
			ТочкаМаршрутаБизнесПроцесса,
			ФормируемыеЗадачи[0],
			Перечисления.ВидыЗадачАИТП.Действие,
			"СоздатьПользователейИнформационнойБазыАИТП"
		);
			
КонецПроцедуры

Процедура СоздатьПользователяИнформационнойБазыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
			ТочкаМаршрутаБизнесПроцесса,
			Задача
		);
		
КонецПроцедуры

Процедура РезультатСозданияПользователяОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
			ТочкаВыбораВарианта,
			ЭтотОбъект,
			БизнесПроцессы.СоздатьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуСозданияПользователяИБПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	Задача = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
			ЭтотОбъект,
			БизнесПроцессы.СоздатьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		).Задача;
		
	ФормируемыеЗадачи[0].ОшибкаДляОбработки = Задача.Ошибка;
	
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
			ТочкаМаршрутаБизнесПроцесса,
			ФормируемыеЗадачи[0],
			Перечисления.ВидыЗадачАИТП.ОбработкаОшибки
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуСозданияПользователяИБПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
			ТочкаМаршрутаБизнесПроцесса,
			Задача
		);
		
КонецПроцедуры

Процедура ДальнейшиеДействияОбработатьОшибкуСозданияПользователяИБОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
			ТочкаВыбораВарианта,
			ЭтотОбъект,
			БизнесПроцессы.СоздатьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.ОбработатьОшибкуСозданияПользователяИБ
		);
		
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если Не ЭтотОбъект.НеУдалятьПарольПриЗавершении = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	БизнесПроцессыАИТП.ПриЗавершенииБП(
			ТочкаМаршрутаБизнесПроцесса
			, ЭтотОбъект
			, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
			, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		);
		
КонецПроцедуры

Процедура УстановитьПароль(Пароль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонфиденциальныеДанныеАИТП.ВставитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка,, ПолучитьДвоичныеДанныеИзСтроки(Пароль));
	
КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если Не ЭтотОбъект.НеУдалятьПарольПриЗавершении = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	
	БизнесПроцессыАИТП.ПриЗавершенииБП(ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		);
		
КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если Не ЭтотОбъект.НеУдалятьПарольПриЗавершении = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
		
	БизнесПроцессыАИТП.ПриЗавершенииБП(ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		);
	
КонецПроцедуры

#КонецОбласти
