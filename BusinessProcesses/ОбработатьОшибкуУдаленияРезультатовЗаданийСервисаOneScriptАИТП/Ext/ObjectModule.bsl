
Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		);
		
КонецПроцедуры

Процедура ПревышеноКоличествоПопытокПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
	МенеджерЗаписи = РегистрыСведений.НастройкиУдаленияРезультатовЗаданийСервисовOneScriptАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = ЭтотОбъект.Сервис;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		КоличествоПопыток = МенеджерЗаписи.КоличествоПопыток;
	Иначе
		КоличествоПопыток = 0;
	КонецЕсли;
	
	ИнформацияОЗадаче = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.УдалитьРезультатыЗаданийСервисаOneScript
		);
		
	Если Не ИнформацияОЗадаче = Неопределено Тогда
		БылоПопыток = ИнформацияОЗадаче.КоличествоВыполнений;
	Иначе
		БылоПопыток = 0;
	КонецЕсли;
	
	Результат = БылоПопыток >= КоличествоПопыток;
	
КонецПроцедуры

Процедура ПодождатьПередСледующейПопыткойПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	МенеджерЗаписи = РегистрыСведений.НастройкиУдаленияРезультатовЗаданийСервисовOneScriptАИТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = Сервис;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		ИнтервалМеждуПопытками = МенеджерЗаписи.ИнтервалМеждуПопытками;
	Иначе
		ИнтервалМеждуПопытками = 0;
	КонецЕсли;
	
	Задача = ФормируемыеЗадачи[0];
	Задача.ДатаВыполнения = ТекущаяДата() + ИнтервалМеждуПопытками;
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		, Перечисления.ВидыЗадачАИТП.Ожидание
		);
		
КонецПроцедуры

Процедура ПодождатьПередСледующейПопыткойПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		);
		
КонецПроцедуры

Процедура УдалитьРезультатыЗаданийСервисаOneScriptПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.Действие
		);
	БизнесПроцессыАИТП.ВыполнитьДействиеПоЗадачеАсинхронно(
		ФормируемыеЗадачи[0].Ссылка
		, "ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.УдалитьРезультатыЗаданийСервисаOneScript"
		);
		
КонецПроцедуры

Процедура РезультатРезультатУдаленияРезультатовЗаданийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.УдалитьРезультатыЗаданийСервисаOneScript
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСОшибкой = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.УдалитьРезультатыЗаданийСервисаOneScript
		).Задача;
		
	ФормируемыеЗадачи[0].ОшибкаДляОбработки = ЗадачаСОшибкой.Ошибка;
	
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.ОбработкаОшибки
		);
		
КонецПроцедуры

Процедура РезультатОбработкиОшибкиУдаленияРезультатовЗаданийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScript
		);
		
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
		, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		);
		
КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		);

КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		);

КонецПроцедуры

Процедура ИсправитьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	Информация = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
			ЭтотОбъект,
			БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.УдалитьРезультатыЗаданийСервисаOneScript
		);
		
	Если Информация = Неопределено Тогда
		ФормируемыеЗадачи[0].Описание = ЭтотОбъект.ОписаниеОшибки;
	Иначе
		ФормируемыеЗадачи[0].Описание = Информация.Задача.ОписаниеРезультата;
	КонецЕсли;
	
	ФормируемыеЗадачи[0].СпособВыполнения = Перечисления.СпособыВыполненияЗадачАИТП.Интерактивно;
	ФормируемыеЗадачи[0].ДальнейшиеДействия = Перечисления.ДальнейшиеДействияАИТП.Повторить;
	
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.Действие
		);
		
КонецПроцедуры

Процедура ИсправитьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		);
		
КонецПроцедуры

Процедура РезультатИсправленияОшибкиУдаленияРезультатовЗаданийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptАИТП.ТочкиМаршрута.ИсправитьОшибкуУдаленияРезультатовЗаданийСервисаOneScript
		);
		
КонецПроцедуры

Процедура УдалитьРезультатыЗаданийСервисаOneScriptПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуУдаленияРезультатовЗаданийСервисаOneScriptПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		);

КонецПроцедуры
