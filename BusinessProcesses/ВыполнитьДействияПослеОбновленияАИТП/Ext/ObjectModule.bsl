
Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура РазрешитьСтартФоновыхЗаданийПроцессовПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.Действие
		,
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
	// Перед запуском фонового задания разрешаем обработку зависших
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("ПометитьНезапущенныеАсинхронныеЗадачиКакЗавершенныеСОшибкойАИТП");
	РегламентноеЗадание.Использование = Истина;
	РегламентноеЗадание.Записать();

	БизнесПроцессыАИТП.ВыполнитьДействиеПоЗадачеАсинхронно(
		ФормируемыеЗадачи[0].Ссылка
		, "ВыполнитьДействияПослеОбновленияАИТП.РазрешитьСтартФоновыхЗаданийПроцессов"
		,
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура РазрешитьСтартФоновыхЗаданийПроцессовПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		);
		
КонецПроцедуры

Процедура РезультатРазрешенияСтрартаФоновыхЗаданийПроцессовОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ВыполнитьДействияПослеОбновленияАИТП.ТочкиМаршрута.РазрешитьСтартФоновыхЗаданийПроцессов
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуРазрешенияСтартаФоновыхЗаданийПроцессовПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСОшибкой = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.ВыполнитьДействияПослеОбновленияАИТП.ТочкиМаршрута.РазрешитьСтартФоновыхЗаданийПроцессов
		).Задача;
	ФормируемыеЗадачи[0].ОшибкаДляОбработки = ЗадачаСОшибкой.Ошибка;
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.ОбработкаОшибки
		,
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуРазрешенияСтартаФоновыхЗаданийПроцессовПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура РезультатОбработкиОшибкиРазрешенияСтартаФоновыхЗаданийПроцессовОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.ВыполнитьДействияПослеОбновленияАИТП.ТочкиМаршрута.ОбработатьОшибкуРазрешенияСтартаФоновыхЗаданийПроцессов
		);
		
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
		, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		, 
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		, 
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		,
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры

Процедура ПроверкаДоступностиЗаданиемПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
	Результат = ЭтотОбъект.ПроверкаОкончанияОбновленияЗаданием;
	
КонецПроцедуры

Процедура ОжидатьДоступностиИнформационнойБазыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ФормируемыеЗадачи[0].ДатаВыполнения = ТекущаяДата() + Константы.МинимальнаяДлительностьОбновленияАИТП.Получить();
	БизнесПроцессыАИТП.ПриСозданииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.Действие
		,
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
	ВыполнитьДействияПослеОбновленияАИТП.ПодключитьПроверкуОкончанияОбновления();
	
КонецПроцедуры

Процедура ОжидатьДоступностиИнформационнойБазыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(
		ТочкаМаршрутаБизнесПроцесса
		, Задача
		, "ОбновлениеСистемыАИТП.ОбработчикОповещения"
		);
		
КонецПроцедуры
