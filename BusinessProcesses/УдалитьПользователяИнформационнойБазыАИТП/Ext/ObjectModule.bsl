
Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(ТочкаМаршрутаБизнесПроцесса, ЭтотОбъект);
	
КонецПроцедуры

Процедура УдалитьПользователяИнформационнойБазыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса
		, ФормируемыеЗадачи[0]
		, Перечисления.ВидыЗадачАИТП.Действие
		, "УдалитьПользователейИнформационнойБазыАИТП"
		);
		
КонецПроцедуры

Процедура УдалитьПользователяИнформационнойБазыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса
		, Задача
		);
		
КонецПроцедуры

Процедура РезультатУдаленияПользователяОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.УдалитьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.УдалитьПользователяИнформационнойБазы
		);
		
КонецПроцедуры

Процедура ОбработатьОшибкуУдаленияПользователяИБПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСОшибкой = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.УдалитьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.УдалитьПользователяИнформационнойБазы).Задача;
		
	ФормируемыеЗадачи[0].ОшибкаДляОбработки = ЗадачаСОшибкой.Ошибка;
	ФормируемыеЗадачи[0].СпособВыполнения = Перечисления.СпособыВыполненияЗадачАИТП.Интерактивно;
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0], Перечисления.ВидыЗадачАИТП.ОбработкаОшибки);
	
КонецПроцедуры

Процедура ОбработатьОшибкуУдаленияПользователяИБПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура ДальнейшиеДействияОбработатьОшибкуУдаленияПользователяИБОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.УдалитьПользователяИнформационнойБазыАИТП.ТочкиМаршрута.ОбработатьОшибкуУдаленияПользователяИБ
		);
		
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
		, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		);
	
КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		);

КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		);

КонецПроцедуры
