#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПароль(Пароль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонфиденциальныеДанныеАИТП.ВставитьСтрокуКонфиденциальныхДанных(ЭтотОбъект.Ссылка,, Пароль);
	
КонецПроцедуры

Процедура СоздатьПользователяИнформационнойБазыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0]);
	
КонецПроцедуры

Процедура СоздатьПользователяИнформационнойБазыПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцесс = ФормируемыеБизнесПроцессы[0];
	
	БизнесПроцесс.Имя = ЭтотОбъект.Имя;
	БизнесПроцесс.ПолноеИмя = ЭтотОбъект.ПолноеИмя;
	БизнесПроцесс.АутентификацияСтандартная = ЭтотОбъект.АутентификацияСтандартная;
	БизнесПроцесс.ПоказыватьВСпискеВыбора = ЭтотОбъект.ПоказыватьВСпискеВыбора;
	БизнесПроцесс.АутентификацияОС = ЭтотОбъект.АутентификацияОС;
	БизнесПроцесс.ПользовательОС = ЭтотОбъект.ПользовательОС;
	БизнесПроцесс.ЗапрещеноИзменятьПароль = ЭтотОбъект.ЗапрещеноИзменятьПароль;
	БизнесПроцесс.АутентификацияOpenID = ЭтотОбъект.АутентификацияOpenID;
	БизнесПроцесс.ПредупреждатьОбОпасныхДействиях = ЭтотОбъект.ПредупреждатьОбОпасныхДействиях;
	БизнесПроцесс.Язык = ЭтотОбъект.Язык;
	
	Для каждого Роль Из ЭтотОбъект.Роли Цикл
	
		ДобавляемаяРоль = БизнесПроцесс.Роли.Добавить();
		ДобавляемаяРоль.Роль = Роль.Роль;
	
	КонецЦикла;
	
	БизнесПроцесс.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = КонфиденциальныеДанныеАИТП.ПолучитьКонфиденциальныеДанныеКакСтроку(ЭтотОбъект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пароль = Неопределено Тогда
		БизнесПроцесс.УстановитьПароль(Пароль);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПередСтартомБП(ТочкаМаршрутаБизнесПроцесса, ЭтотОбъект);
	
КонецПроцедуры

Процедура СоздатьПользователяИнформационнойБазыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура РезультатСозданияПользователяИнформационнойБазыОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		);
		
КонецПроцедуры

Процедура СоздатьПользователяАИТППриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0]);
	
КонецПроцедуры

Процедура СоздатьПользователяАИТППриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура СоздатьПользователяАИТППриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСоздатьПользователяИБ = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		).Задача;
		
	БизнесПроцесс = БизнесПроцессыАИТП.ПолучитьВложенныйБизнесПроцесс(
		БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		, ЗадачаСоздатьПользователяИБ);
		
	УникальныйИдентификатор = ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(БизнесПроцесс, "УникальныйИдентификатор");
	ФормируемыеБизнесПроцессы[0].УникальныйИдентификатор = Строка(УникальныйИдентификатор);
	ФормируемыеБизнесПроцессы[0].Наименование = ЭтотОбъект.ПолноеИмя;
	ФормируемыеБизнесПроцессы[0].Записать();

КонецПроцедуры

Процедура ДальнейшиеДействияСоздатьПользователяИнформационнойБазыОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		);
		
КонецПроцедуры

Процедура РезультатСозданияПользователяАИТПОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаРезультатПоложительныйОтрицательныйОшибка(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяАИТП
		);
		
КонецПроцедуры

Процедура ДальнейшиеДействияСоздатьПользователяАИТПОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	// Вставить содержимое обработчика.
	Результат = БизнесПроцессыАИТП.ВыборВариантаПродолжитьПовторитьЗавершитьОтменить(
		ТочкаВыбораВарианта
		, ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяАИТП
		);
		
КонецПроцедуры

Процедура УдалитьПользователяИнформационойБазыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриСозданииЗадачи(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи[0]);
	
КонецПроцедуры

Процедура УдалитьПользователяИнформационойБазыПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	// Вставить содержимое обработчика.
	ЗадачаСоздатьПользователяИБ = БизнесПроцессыАИТП.ПолучитьИнформациюОПоследнейВыполненнойЗадаче(
		ЭтотОбъект
		, БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		).Задача;
		
	БизнесПроцесс = БизнесПроцессыАИТП.ПолучитьВложенныйБизнесПроцесс(
		БизнесПроцессы.СоздатьПользователяПодсистемыАИТП.ТочкиМаршрута.СоздатьПользователяИнформационнойБазы
		, ЗадачаСоздатьПользователяИБ);
		
	УникальныйИдентификатор = ДополнительныеДанныеАИТП.ПолучитьДополнительныеДанные(БизнесПроцесс, "УникальныйИдентификатор");
	ФормируемыеБизнесПроцессы[0].УникальныйИдентификатор = Строка(УникальныйИдентификатор);
	ФормируемыеБизнесПроцессы[0].Записать();
	
КонецПроцедуры

Процедура УдалитьПользователяИнформационойБазыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	БизнесПроцессыАИТП.ПриВыполненииЗадачи(ТочкаМаршрутаБизнесПроцесса, Задача);
	
КонецПроцедуры

Процедура ЗавершениеОтменитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если ЭтотОбъект.НеУдалятьПарольПриЗавершении = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Отменить
		);
		
КонецПроцедуры

Процедура ЗавершениеЗавершитьПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если ЭтотОбъект.НеУдалятьПарольПриЗавершении = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Отрицательный
		, Перечисления.ДальнейшиеДействияАИТП.Завершить
		);

КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
	Если ЭтотОбъект.НеУдалятьПарольПриЗавершении = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонфиденциальныеДанныеАИТП.УдалитьКонфиденциальныеДанные(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	БизнесПроцессыАИТП.ПриЗавершенииБП(
		ТочкаМаршрутаБизнесПроцесса
		, ЭтотОбъект
		, Перечисления.РезультатыВыполненияДействияАИТП.Положительный
		, Перечисления.ДальнейшиеДействияАИТП.Продолжить
		);

КонецПроцедуры

#КонецОбласти
